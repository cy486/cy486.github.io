[{"title":"ERROR: Could not find a version that satisfies the requirement tensortfows (from versions: none) ERROR: No matching distribution found for tensortfows","url":"http://yoursite.com/2019/06/02/ERROR-Could-not-find-a-version-that-satisfies-the-requirement-tensortfows-from-versions-none-ERROR-No-matching-distribution-found-for-tensortfows/","content":"<p>1.首先tensortfows是仅支持64位的python环境，所以现在控制台输入python，看一下版本 [python3.6,64位下载]（<a href=\"https://www.python.org/ftp/python/3.6.0/python-3.6.0-amd64.exe）\" target=\"_blank\" rel=\"noopener\">https://www.python.org/ftp/python/3.6.0/python-3.6.0-amd64.exe）</a><br>2.第二，网上说不支持python3.7版本的。（我一直用的3.7）。改用低版本python就可以。<br>3.建议使用anaconda来继承深度学习的环境</p>\n","categories":["遇到的各种bug"],"tags":["android"]},{"title":"SSR 搭建教程(科学上网)","url":"http://yoursite.com/2019/06/02/SSR-搭建教程-科学上网/","content":"<h1 id=\"搭建自己的ssr服务器\"><a href=\"#搭建自己的ssr服务器\" class=\"headerlink\" title=\"搭建自己的ssr服务器\"></a>搭建自己的ssr服务器</h1><h2 id=\"1-拥有一台自己的服务器\"><a href=\"#1-拥有一台自己的服务器\" class=\"headerlink\" title=\"1. 拥有一台自己的服务器\"></a>1. 拥有一台自己的服务器</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/miria-486/p/10687744.html\" target=\"_blank\" rel=\"noopener\">可以参考我的文章</a><br>  也可以买<a href=\"https://www.qcgzxw.com/2293.html\" target=\"_blank\" rel=\"noopener\">vultr</a><br>  这两个都是月付，有时候ip被qiang了只能换了。</p>\n</blockquote>\n<h2 id=\"2-下载SSR客户端（Python3-pip方法）\"><a href=\"#2-下载SSR客户端（Python3-pip方法）\" class=\"headerlink\" title=\"2.下载SSR客户端（Python3 pip方法）\"></a>2.下载SSR客户端（Python3 pip方法）</h2><blockquote>\n<p>参考的教程是使用python3进行下载和搭建，相比于直接ssr我感觉更方便一些。</p>\n</blockquote>\n<p>（1）安装pip3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt install python3-pip</span><br></pre></td></tr></table></figure>\n\n<p>（2）安装Shadowsocks</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install https://github.com/shadowsocks/shadowsocks/archive/master.zip</span><br></pre></td></tr></table></figure>\n\n<p>(3)创建Shadowsocks配置文件所在文件夹：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /etc/shadowsocks</span><br></pre></td></tr></table></figure>\n\n<p>(4)创建配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>下面的password改成自己设置的密码，以后改端口号也是在这个文件下更改，建议使用小一点的server_port,校园网连接的话，会ban了大端口（校园网不能打游戏一个道理）</p>\n</blockquote>\n<p>在文件中加入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;::&quot;,</span><br><span class=\"line\">    &quot;server_port&quot;:2333,</span><br><span class=\"line\">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;password&quot;:&quot;你自己的密码&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;:300,</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class=\"line\">    &quot;fast_open&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（5）测试Shadowsocks配置<br>首先记录下服务器的IP地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n\n<p>找到IPv4地址（和IPv6地址），如我的ifconfig输出为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 134.209.196.117  netmask 255.255.240.0  broadcast 134.209.207.255</span><br><span class=\"line\">        inet6 2a03:b0c0:2:f0::139:3001  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class=\"line\">        inet6 fe80::b8ee:f0ff:fe10:fcce  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class=\"line\">        ether ba:ee:f0:10:fc:ce  txqueuelen 1000  (Ethernet)</span><br><span class=\"line\">        RX packets 38661  bytes 22271799 (22.2 MB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 37329  bytes 22347643 (22.3 MB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class=\"line\">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class=\"line\">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class=\"line\">        RX packets 851  bytes 78860 (78.8 KB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 851  bytes 78860 (78.8 KB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>所以我的IPv4地址是134.209.196.117，IPv6地址是2a03:b0c0:2:f0::139:3001。</p>\n</blockquote>\n<p>(5.1)然后来测试下Shadowsocks能不能正常工作了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在Shadowsocks客户端添加服务器(下载地址在下面)，<br>地址填写你的IPv4地址或IPv6地址<br>端口号为2333<br>加密方法为aes-256-cfb<br>密码为你设置的密码。<br>然后设置客户端使用全局模式<br>浏览器登录Google试试应该能直接打开了。</p>\n</blockquote>\n<h2 id=\"测试完毕，按Ctrl-C关闭Shadowsocks。\"><a href=\"#测试完毕，按Ctrl-C关闭Shadowsocks。\" class=\"headerlink\" title=\"测试完毕，按Ctrl + C关闭Shadowsocks。\"></a>测试完毕，按Ctrl + C关闭Shadowsocks。</h2><p>(6)新建Shadowsocks管理文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/systemd/system/shadowsocks-server.service</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>加入以下代码</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Shadowsocks Server</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks/config.json</span><br><span class=\"line\">Restart=on-abort</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">Ctrl + O保存文件，Ctrl + X退出。</span><br></pre></td></tr></table></figure>\n\n<p>(7)启动Shadowsocks：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start shadowsocks-server</span><br></pre></td></tr></table></figure>\n\n<p>(8)设置开机启动Shadowsocks：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable shadowsocks-server</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"客户端ssr下载地址\"><a href=\"#客户端ssr下载地址\" class=\"headerlink\" title=\"客户端ssr下载地址\"></a>客户端ssr下载地址</h1><h2 id=\"pc端\"><a href=\"#pc端\" class=\"headerlink\" title=\"pc端\"></a><a href=\"https://github.com/shadowsocks/shadowsocks/tree/master\" target=\"_blank\" rel=\"noopener\">pc端</a></h2><h2 id=\"android端\"><a href=\"#android端\" class=\"headerlink\" title=\"android端\"></a><a href=\"https://github.com/shadowsocks/shadowsocks-android\" target=\"_blank\" rel=\"noopener\">android端</a></h2><h2 id=\"ipad端，寻找一个外国的账号，直接在appstore下载。\"><a href=\"#ipad端，寻找一个外国的账号，直接在appstore下载。\" class=\"headerlink\" title=\"ipad端，寻找一个外国的账号，直接在appstore下载。\"></a>ipad端，寻找一个外国的账号，直接在appstore下载。</h2><h1 id=\"科学上网成功\"><a href=\"#科学上网成功\" class=\"headerlink\" title=\"科学上网成功\"></a>科学上网成功</h1><blockquote>\n<p>参考<a href=\"https://www.polarxiong.com/archives/Ubuntu-16-04%E4%B8%8BShadowsocks%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BC%98%E5%8C%96.html\" target=\"_blank\" rel=\"noopener\">教程链接</a></p>\n</blockquote>\n","categories":["教程"],"tags":["ssr"]},{"title":"夜神模拟器127.0.0.1:62001: 由于目标 计算机积极拒绝，无法连接 解决方法","url":"http://yoursite.com/2019/05/31/夜神模拟器127-0-0-1-62001-由于目标-计算机积极拒绝，无法连接-解决方法/","content":"<ol>\n<li>进入进Android SDK下的platform-tools目录</li>\n<li>将adb.exe拷贝至夜神bin目录下，粘贴两个，一个改成nox_adb.exe，把原来的nox_adb.exe删掉。</li>\n<li>cmd里面nox_adb connect 127.0.0.1:62001</li>\n<li>如果62001端口用不.了就换一个。</li>\n</ol>\n","categories":["遇到的各种bug"],"tags":["android"]},{"title":"leetcode17","url":"http://yoursite.com/2019/05/31/leetcode17/","content":"<p>转载请注明出处<br>Letter Combinations of a Phone Number</p>\n<p>Given a digit string, return all possible letter combinations that the number could represent.</p>\n<p>A mapping of digit to letters (just like on the telephone buttons) is given below.</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190319150322629.png\" alt=\"在这里插入图片描述\"><br>Input:Digit string “23”<br>Output: [“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].<br>Note:<br>Although the above answer is in lexicographical order, your answer could be in any order you want.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func letterCombinations(digits string) []string &#123;</span><br><span class=\"line\">    if (len(digits)) == 0 &#123;</span><br><span class=\"line\">        return nil</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    AllDigits := map[byte][]string&#123;</span><br><span class=\"line\">        &apos;0&apos;: &#123;&quot; &quot;&#125;,</span><br><span class=\"line\">        &apos;1&apos;: &#123;&quot;&quot;&#125;,</span><br><span class=\"line\">        &apos;2&apos;: &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;,</span><br><span class=\"line\">        &apos;3&apos;: &#123;&quot;d&quot;, &quot;e&quot;, &quot;f&quot;&#125;,</span><br><span class=\"line\">        &apos;4&apos;: &#123;&quot;g&quot;, &quot;h&quot;, &quot;i&quot;&#125;,</span><br><span class=\"line\">        &apos;5&apos;: &#123;&quot;j&quot;, &quot;k&quot;, &quot;l&quot;&#125;,</span><br><span class=\"line\">        &apos;6&apos;: &#123;&quot;m&quot;, &quot;n&quot;, &quot;o&quot;&#125;,</span><br><span class=\"line\">        &apos;7&apos;: &#123;&quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;&#125;,</span><br><span class=\"line\">        &apos;8&apos;: &#123;&quot;t&quot;, &quot;u&quot;, &quot;v&quot;&#125;,</span><br><span class=\"line\">        &apos;9&apos;: &#123;&quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var cur string</span><br><span class=\"line\">    answer := make([]string, 0)</span><br><span class=\"line\">    dfs(digits, AllDigits, 0, cur, &amp;answer)</span><br><span class=\"line\">    fmt.Println(answer)</span><br><span class=\"line\">    return answer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func dfs(digits string, AllDigits map[byte][]string, l int, cur string, answer *[]string) &#123;</span><br><span class=\"line\">    if l == len(digits) &#123;</span><br><span class=\"line\">        *answer = append(*answer, cur)</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for _, n := range AllDigits[byte(digits[l])] &#123;</span><br><span class=\"line\">        cur = cur + n</span><br><span class=\"line\">        dfs(digits, AllDigits, l+1, cur, answer)</span><br><span class=\"line\">        cur = cur[:int(len(cur)-1)]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["leetcode"],"tags":["算法;golang"]},{"title":"算法学习--最大子数组和（分治法）","url":"http://yoursite.com/2019/05/31/算法学习-最大子数组和（分治法）/","content":"<h1 id=\"最大子数组\"><a href=\"#最大子数组\" class=\"headerlink\" title=\"最大子数组\"></a>最大子数组</h1><hr>\n<h2 id=\"算法描述：\"><a href=\"#算法描述：\" class=\"headerlink\" title=\"算法描述：\"></a>算法描述：</h2><blockquote>\n<p>1 找到数组中间位置mid，分成两个数组[low,mid],[mid,high]<br>   2 最大子数组即为，[low,mid],[mid,high]和跨越mid的数组，3种情况之中的最大者。<br>   3 [low,mid],[mid,high]可以使用递归算法求解<br>   4 跨越中间点的情况，从中间点分别向左右遍历，寻找最大的包含中间点的最大子数组。将两者相加<br>   5 比较[low,mid],[mid,high]和跨越mid的数组重的最大者即为所求</p>\n</blockquote>\n<hr>\n<h2 id=\"时间复杂度：\"><a href=\"#时间复杂度：\" class=\"headerlink\" title=\"时间复杂度：\"></a>时间复杂度：</h2><blockquote>\n<p>最大子段和即为这三个区间的最大子段和的最大值。因此原问题可化为两个求解规模为 n/2 的子问题，和求解一个跨越中点的序列的最大子段和问题。其中第三种情况可分别求解序列 a1,…,amida1,…,amid 和 amid+1,…,anamid+1,…,an 的最大子序列，然后将两者合并即可，因此该部分的时间复杂度为 Θ(n)。算法的时间复杂度可用递归的形式表示为：<br>T(n)={Θ(1),n=12T(n/2)+Θ(n),n&gt;1<br>T(n)={Θ(1),n=12T(n/2)+Θ(n),n&gt;1<br>可得，算法的复杂度为T(n)=Θ(nlgn)T(n)=Θ(nlgn)。</p>\n</blockquote>\n<hr>\n<h1 id=\"java-实现\"><a href=\"#java-实现\" class=\"headerlink\" title=\"java 实现\"></a>java 实现</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import static java.lang.Float.POSITIVE_INFINITY;</span><br><span class=\"line\">/*</span><br><span class=\"line\">@Time    :2019/5/18 0018 下午 7:11</span><br><span class=\"line\">@Author  :喜欢二福的沧月君（necydcy@gmail.com）</span><br><span class=\"line\">@FileName: MaxCrossing.java</span><br><span class=\"line\">@Software: IntelliJ IDEA</span><br><span class=\"line\">*/</span><br><span class=\"line\">public class MaxCrossing &#123;</span><br><span class=\"line\">    /*</span><br><span class=\"line\">    * 最大子数组:</span><br><span class=\"line\">    * 分治法求解</span><br><span class=\"line\">    * 1 找到数组中间位置mid，分成两个数组[low,mid],[mid,high]</span><br><span class=\"line\">    * 2 最大子数组即为，[low,mid],[mid,high]和跨越mid的数组，3种情况之中的最大者。</span><br><span class=\"line\">    * 3 [low,mid],[mid,high]可以使用递归算法求解</span><br><span class=\"line\">    * 4 跨越中间点的情况，从中间点分别向左右遍历，寻找最大的包含中间点的最大子数组。将两者相加</span><br><span class=\"line\">    * 5 比较[low,mid],[mid,high]和跨越mid的数组重的最大者即为所求</span><br><span class=\"line\">    * */</span><br><span class=\"line\">    public static void main(String[] args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //测试函数</span><br><span class=\"line\">        int[] array = &#123; 9,10,8,12,6,10,12,11,9,1 &#125;;</span><br><span class=\"line\">        int[] arr = new int[array.length-1];</span><br><span class=\"line\">        for (int i = 0; i &lt;array.length-1 ; i++) &#123;</span><br><span class=\"line\">            arr[i] = array[i+1]-array[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int[] result =FindMaxImumSubarray(arr, 0, arr.length - 1);</span><br><span class=\"line\">        for (int value : result) &#123;</span><br><span class=\"line\">            System.out.println(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;最大子字符串和：&quot;+(array[result[0]]+array[result[1]]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static int[] FindMaxImumSubarray(int[] A, int low, int high) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (high == low)&#123;</span><br><span class=\"line\">            return new int[]&#123;low,high,A[low]&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            int mid = (low+high)/2;</span><br><span class=\"line\">            int[] lefts = new int[3];</span><br><span class=\"line\">            int[] mids = new int[3];</span><br><span class=\"line\">            int[] rights = new int[3];</span><br><span class=\"line\">            lefts = FindMaxImumSubarray(A,low,mid);</span><br><span class=\"line\">            rights = FindMaxImumSubarray(A,mid+1,high);</span><br><span class=\"line\">            mids = FindMaxCrossingSubarray(A,low,mid,high);</span><br><span class=\"line\">            assert rights != null;</span><br><span class=\"line\">            assert lefts != null;</span><br><span class=\"line\">            if (lefts[2]&gt;rights[2]&amp;&amp;lefts[2]&gt;mids[2])&#123;</span><br><span class=\"line\">                return lefts;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else if (rights[2]&gt;lefts[2]&amp;&amp;rights[2]&gt;mids[2])&#123;</span><br><span class=\"line\">                return rights;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else return mids;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static int[] FindMaxCrossingSubarray(int[] A, int low, int mid, int high) &#123;</span><br><span class=\"line\">        int leftSum = (int) -POSITIVE_INFINITY;</span><br><span class=\"line\">        int sum = 0;</span><br><span class=\"line\">        int maxLeft = 0;</span><br><span class=\"line\">        for (int i = mid; i &gt;=low ; i--) &#123;</span><br><span class=\"line\">            sum += A[i];</span><br><span class=\"line\">            if (sum&gt;leftSum)&#123;</span><br><span class=\"line\">                leftSum = sum;</span><br><span class=\"line\">                maxLeft = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int rightSum = (int) -POSITIVE_INFINITY;</span><br><span class=\"line\">        sum = 0;</span><br><span class=\"line\">        int maxRight = 0;</span><br><span class=\"line\">        for (int j = mid+1; j &lt;=high ; j++) &#123;</span><br><span class=\"line\">            sum += A[j];</span><br><span class=\"line\">            if (sum&gt;rightSum)&#123;</span><br><span class=\"line\">                rightSum = sum;</span><br><span class=\"line\">                maxRight = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return new int[]&#123;maxLeft,maxRight,leftSum+rightSum&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["读书笔记"],"tags":["算法"]},{"title":"算法学习--归并排序（分治法）","url":"http://yoursite.com/2019/05/31/算法学习-归并排序（分治法）/","content":"<h1 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h1><hr>\n<h3 id=\"分治法\"><a href=\"#分治法\" class=\"headerlink\" title=\"分治法\"></a>分治法</h3><blockquote>\n<p>分治法可以通俗的解释为：把一片领土分解，分解为若干块小部分，然后一块块地占领征服，被分解的可以是不同的政治派别或是其他什么，然后让他们彼此异化。<br>分治法的精髓：<br>分–将问题分解为规模更小的子问题；<br>治–将这些规模更小的子问题逐个击破；<br>合–将已解决的子问题合并，最终得出“母”问题的解；<a href=\"https://baike.baidu.com/item/%E5%88%86%E6%B2%BB%E6%B3%95/2407337\" target=\"_blank\" rel=\"noopener\">百度百科</a></p>\n</blockquote>\n<hr>\n<hr>\n<h3 id=\"归并排序的复杂度\"><a href=\"#归并排序的复杂度\" class=\"headerlink\" title=\"归并排序的复杂度\"></a>归并排序的复杂度</h3><blockquote>\n<p>归并排序是一种稳定的排序算法，归并排序的主要问题在于它需要一个与待排序数组一样大的辅助数组空间。由于归并排序每次划分时两个子序列的长度基本一样，所以归并排序最好、最差和平均时间复杂度都是nlog2n。</p>\n</blockquote>\n<hr>\n<h3 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h3><blockquote>\n<p>归并操作的工作原理如下：<br>第一步：申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列<br>第二步：设定两个指针，最初位置分别为两个已经排序序列的起始位置<br>第三步：比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置<br>重复步骤3直到某一指针超出序列尾<br>将另一序列剩下的所有元素直接复制到合并序列尾</p>\n</blockquote>\n<hr>\n<h1 id=\"java实现\"><a href=\"#java实现\" class=\"headerlink\" title=\"java实现\"></a>java实现</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import static java.lang.Float.POSITIVE_INFINITY;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MergeSort&#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int arr[]=&#123;1,5,6,8,7,4,3,9&#125;;</span><br><span class=\"line\">        MergeSort_Manger(arr,0,arr.length-1);</span><br><span class=\"line\">        for (int e:arr)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            System.out.print(e+&quot;\\t&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void MergeSort_Manger(int[] arr, int begin, int end) &#123;</span><br><span class=\"line\">        if(begin&lt;end)&#123;</span><br><span class=\"line\">            int mid=(begin+end)/2;</span><br><span class=\"line\">            MergeSort_Manger(arr,begin,mid);//对左段进行排序</span><br><span class=\"line\">            MergeSort_Manger(arr,mid+1,end);//对右段进行排序</span><br><span class=\"line\">            MergeSort(arr,begin,mid,end);//合并</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static void MergeSort(int[] arr, int begin, int mid, int end) &#123;</span><br><span class=\"line\">        /*</span><br><span class=\"line\">        * 1.设置两个临时的数组，分别存放数组的前半段和后半段</span><br><span class=\"line\">        * 2.把两个数组的最后一位赋值为无穷大</span><br><span class=\"line\">        * 3.比较两个数组，把相对较小的值（最小值）插入到原数组的begin位</span><br><span class=\"line\">        * */</span><br><span class=\"line\">        int n1=mid-begin+1;</span><br><span class=\"line\">        int n2=end-mid;</span><br><span class=\"line\">        int[] L= new int [n1+1];</span><br><span class=\"line\">        int[] R= new int [n2+1];</span><br><span class=\"line\">        L[n1]=(int)POSITIVE_INFINITY;//正无穷大</span><br><span class=\"line\">        R[n2]=(int)POSITIVE_INFINITY;</span><br><span class=\"line\">        for (int i = 0; i &lt;n1; i++) &#123;</span><br><span class=\"line\">            L[i]=arr[begin+i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i = 0; i &lt;n2; i++) &#123;</span><br><span class=\"line\">            R[i]=arr[mid+i+1];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int k=0,i=0,j=0;</span><br><span class=\"line\">        for ( k=begin;k&lt;=end;k++)&#123;</span><br><span class=\"line\">            if (R[i]&lt;L[j])&#123;</span><br><span class=\"line\">                arr[k]=R[i++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else</span><br><span class=\"line\">                 arr[k]=L[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["读书笔记"],"tags":["算法"]},{"title":"算法学习--插入排序","url":"http://yoursite.com/2019/05/31/算法学习-插入排序/","content":"<h1 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h1><blockquote>\n<p>–对于少量排序，他是一个有效的算法。有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，这个时候就要用到一种新的排序方法——插入排序法,插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)。是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。<br>插入排序的基本思想是：每步将一个待排序的记录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。<br><a href=\"https://baike.baidu.com/item/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/7214992?fr=aladdin\" target=\"_blank\" rel=\"noopener\">百度百科</a></p>\n</blockquote>\n<hr>\n<h2 id=\"java代码实现：\"><a href=\"#java代码实现：\" class=\"headerlink\" title=\"java代码实现：\"></a>java代码实现：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Cpaixu &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[]args)&#123;</span><br><span class=\"line\">        int arr[]=&#123;2,5,7,52,3,6&#125;;</span><br><span class=\"line\">        for (int i=1;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">            int key=arr[i];</span><br><span class=\"line\">            int j=i-1;</span><br><span class=\"line\">            while(j&gt;=0&amp;&amp;arr[j]&lt;key)&#123;</span><br><span class=\"line\">                arr[i+1]=arr[i];</span><br><span class=\"line\">                j=j-1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j+1]=key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">        System.out.println(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["读书笔记"],"tags":["算法"]},{"title":"算法学习--序言","url":"http://yoursite.com/2019/05/31/算法学习-序言/","content":"<h3 id=\"算法学习是个需要长期坚持的活动，开一个坑，希望自己慢慢进步。\"><a href=\"#算法学习是个需要长期坚持的活动，开一个坑，希望自己慢慢进步。\" class=\"headerlink\" title=\"算法学习是个需要长期坚持的活动，开一个坑，希望自己慢慢进步。\"></a>算法学习是个需要长期坚持的活动，开一个坑，希望自己慢慢进步。</h3><blockquote>\n<p>工欲善其事，必先利利器。</p>\n</blockquote>\n<h4 id=\"算法学习的葵花宝典\"><a href=\"#算法学习的葵花宝典\" class=\"headerlink\" title=\"算法学习的葵花宝典\"></a>算法学习的葵花宝典</h4><p>Introduction to Algorithms<br>Clrs3.jpeg<br>Cover of the third edition<br>Author    Thomas H. Cormen<br>Charles E. Leiserson<br>Ronald L. Rivest<br>Clifford Stein<br>Country     United States<br>Language    English<br>Subject    Computer algorithms<br>Publisher    MIT Press<br>Publication date<br>1990 (first edition)<br>Pages    1312<br>ISBN    978-0-262-03384-8<br>Introduction to Algorithms is a book by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. The book has been widely used as the textbook for algorithms courses at many universities[1] and is commonly cited as a reference for algorithms in published papers, with over 10,000 citations documented on CiteSeerX.[2] The book sold half a million copies during its first 20 years.[3] Its fame has led to the common use of the abbreviation “CLRS” (Cormen, Leiserson, Rivest, Stein), or, in the first edition, “CLR” (Cormen, Leiserson, Rivest).[4]</p>\n<p>In the preface, the authors write about how the book was written to be comprehensive and useful in both teaching and professional environments. Each chapter focuses on an algorithm, and discusses its design techniques and areas of application. Instead of using a specific programming language, the algorithms are written in pseudocode. The descriptions focus on the aspects of the algorithm itself, its mathematical properties, and emphasize efficiency.[5]</p>\n<hr>\n<p>链接：<a href=\"https://pan.baidu.com/s/16hn7KHN1bxL8IAGLjGBexg\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/16hn7KHN1bxL8IAGLjGBexg</a> </p>\n<p>提取码：cnan （请于24小时内删除，仅供分享）</p>\n","categories":["读书笔记"],"tags":["算法"]},{"title":"hexo博客搭建","url":"http://yoursite.com/2019/05/30/hexo博客搭建/","content":"<h1 id=\"搭建hexo博客\"><a href=\"#搭建hexo博客\" class=\"headerlink\" title=\"搭建hexo博客\"></a>搭建hexo博客</h1><blockquote>\n<p>在ubuntu下安装，本人建议使用linux或者max。</p>\n</blockquote>\n<h1 id=\"一-安装hexo博客框架\"><a href=\"#一-安装hexo博客框架\" class=\"headerlink\" title=\"一 安装hexo博客框架\"></a>一 安装hexo博客框架</h1><h2 id=\"1-安装node-js\"><a href=\"#1-安装node-js\" class=\"headerlink\" title=\"1.安装node.js\"></a>1.安装node.js</h2><ul>\n<li><h3 id=\"更新软件源\"><a href=\"#更新软件源\" class=\"headerlink\" title=\"更新软件源\"></a>更新软件源</h3></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install -y python-software-properties software-properties-common</span><br><span class=\"line\">sudo add-apt-repository ppa:chris-lea/node.js</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nodejs</span><br><span class=\"line\">sudo apt install nodejs-legacy</span><br><span class=\"line\">sudo apt install npm</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"更新npm的包镜像源，方便快速下载\"><a href=\"#更新npm的包镜像源，方便快速下载\" class=\"headerlink\" title=\"更新npm的包镜像源，方便快速下载\"></a>更新npm的包镜像源，方便快速下载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm config set registry https://registry.npm.taobao.org</span><br><span class=\"line\">sudo npm config list</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"全局安装n管理器-用于管理nodejs版本\"><a href=\"#全局安装n管理器-用于管理nodejs版本\" class=\"headerlink\" title=\"全局安装n管理器(用于管理nodejs版本)\"></a>全局安装n管理器(用于管理nodejs版本)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install n -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"安装最新的nodejs（stable版本）\"><a href=\"#安装最新的nodejs（stable版本）\" class=\"headerlink\" title=\"安装最新的nodejs（stable版本）\"></a>安装最新的nodejs（stable版本）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo n stable</span><br><span class=\"line\">sudo node -v</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"2-安装hexo\"><a href=\"#2-安装hexo\" class=\"headerlink\" title=\"2.安装hexo\"></a>2.安装hexo</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-创建hexo博客\"><a href=\"#3-创建hexo博客\" class=\"headerlink\" title=\"3.创建hexo博客\"></a>3.创建hexo博客</h2><ul>\n<li><h3 id=\"建立一个空的文件夹（如blog）\"><a href=\"#建立一个空的文件夹（如blog）\" class=\"headerlink\" title=\"建立一个空的文件夹（如blog）\"></a>建立一个空的文件夹（如blog）</h3></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir blog</span><br><span class=\"line\">cd blog/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"生成hexo博客结构\"><a href=\"#生成hexo博客结构\" class=\"headerlink\" title=\"生成hexo博客结构\"></a>生成hexo博客结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"尝试一下启动自己的博客\"><a href=\"#尝试一下启动自己的博客\" class=\"headerlink\" title=\"尝试一下启动自己的博客\"></a>尝试一下启动自己的博客</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"编写一个新的博客\"><a href=\"#编写一个新的博客\" class=\"headerlink\" title=\"编写一个新的博客\"></a>编写一个新的博客</h3></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n &quot;我的第一篇博客&quot;</span><br><span class=\"line\">cd source/_posts/</span><br><span class=\"line\">vim &quot;我的第一篇博客&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>博客采用markdown格式，自己写就可以 了。</p>\n<ul>\n<li><h3 id=\"到此为止，hexo博客便安装成功。\"><a href=\"#到此为止，hexo博客便安装成功。\" class=\"headerlink\" title=\"到此为止，hexo博客便安装成功。\"></a>到此为止，hexo博客便安装成功。</h3></li>\n</ul>\n</blockquote>\n<h1 id=\"二-部署到github\"><a href=\"#二-部署到github\" class=\"headerlink\" title=\"二 部署到github\"></a>二 部署到github</h1><h2 id=\"1-在github新建一个io仓库\"><a href=\"#1-在github新建一个io仓库\" class=\"headerlink\" title=\"1. 在github新建一个io仓库\"></a>1. 在github新建一个io仓库</h2><blockquote>\n<p><a href=\"https://jingyan.baidu.com/article/acf728fd64b5a2f8e510a31d.html\" target=\"_blank\" rel=\"noopener\">github个人主页搭建</a><br>然后把主页的地址复制</p>\n</blockquote>\n<h2 id=\"2-安装git部署插件\"><a href=\"#2-安装git部署插件\" class=\"headerlink\" title=\"2.安装git部署插件\"></a>2.安装git部署插件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save deployer-git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-设置config\"><a href=\"#3-设置config\" class=\"headerlink\" title=\"3. 设置config\"></a>3. 设置config</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim _config.yml</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在最底设置,==注意==下面的几行代码中冒号后面有空格</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: git</span><br><span class=\"line\">repo: 自己刚刚设置的地址</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>按esc<br>wq保存退出</p>\n</blockquote>\n<h2 id=\"4-部署到github\"><a href=\"#4-部署到github\" class=\"headerlink\" title=\"4. 部署到github\"></a>4. 部署到github</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三-更换主题\"><a href=\"#三-更换主题\" class=\"headerlink\" title=\"三 更换主题\"></a>三 更换主题</h1><h2 id=\"1-下载主题\"><a href=\"#1-下载主题\" class=\"headerlink\" title=\"1. 下载主题\"></a>1. 下载主题</h2><blockquote>\n<p>去github上面找到喜欢的hexo的主题，然后复制主题地址</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone 找到的主题地址 themes/主题名字</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-改变主题\"><a href=\"#2-改变主题\" class=\"headerlink\" title=\"2.改变主题\"></a>2.改变主题</h2> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim _config.yml</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>把里面的themes换成自己刚刚下载的</p>\n</blockquote>\n<h2 id=\"3-查看效果更新\"><a href=\"#3-查看效果更新\" class=\"headerlink\" title=\"3.查看效果更新\"></a>3.查看效果更新</h2> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-输入自己的github个人主页地址查看\"><a href=\"#4-输入自己的github个人主页地址查看\" class=\"headerlink\" title=\"4.输入自己的github个人主页地址查看\"></a>4.输入自己的github个人主页地址查看</h2>","categories":["教程"],"tags":["hexo"]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"comment","url":"http://yoursite.com/comment/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"http://yoursite.com/css/personal-style.css","content":"\nnt-face {\n  font-family: \"Meiryo\";\n  src: url(\"/fonts/Meiryo.eot\");\n  /* IE9 */\n  src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n  url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n  url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n  /* iOS 4.1- */\n  font-style: normal;\n  font-weight: normal;\n}\nhtml.page-home {\n  /*background-image: url('/images/bg.jpg')*/\n\n  /*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/\n  /*background-blend-mode: screen;*/\n\n  /*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n}\n","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]}]