[{"title":"IP地址和String类型的转换","url":"http://yoursite.com/2019/11/12/IP地址和String类型的转换/","content":"<p>昨天面试让手写的一个算法。其实我的算法技术是真的不太行。</p>\n<p>我的思路：</p>\n<blockquote>\n<p>按照ip地址，先把ip地址转换成二进制的字符串，然后，每8位截取。生成字符。</p>\n</blockquote>\n<p>面试官说int是四个字节，ip地址是点分十进制。然后每个字节储存的是一位数字。（可以理解，当时真的没有想到位运算这一说。），回头再网上找了一下，果然可以。可是我位运算真的不会。</p>\n<blockquote>\n<p>首先字符串转换成ip地址。按照“.”切分字符串，然后把每个字符串，并按照位置左移八位，然后进行或运算，返回字符</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static int str2Ip(String ip)&#123;</span><br><span class=\"line\">\tString[] ipstrs = ip.split(\\\\.);//按照.分割字符存入数组</span><br><span class=\"line\">\tint rs = 0;//保存结果</span><br><span class=\"line\">\tfor(int i = 0;i &lt; ipstrs.length; i++)&#123;</span><br><span class=\"line\">\t\tint intVal = Integer.parseInt(ipstrs[i]) &lt;&lt; 8 * i;//对应位数转换成对应的数组</span><br><span class=\"line\">\t\trs = rs | intval;//进行与运算，把每次新加进来的保存在头部。</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn rs;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ip地址转换成字符串，每8位进行一次切割，然后存储。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static String IptoString(int ipInt)&#123;</span><br><span class=\"line\">\tString[] ipString = new String[4];</span><br><span class=\"line\">\tfor(int i = 0; i &lt; 4; i++)&#123;</span><br><span class=\"line\">\t\tint pos = i * 8;</span><br><span class=\"line\">\t\tint and = ipInt &amp; (255 &lt;&lt; pos);</span><br><span class=\"line\">\t\tipString[i] = String.valueOf(and &gt;&gt;&gt; pos);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn String.join(&quot;.&quot; , ipString);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>昨天又跑了一天，面试机会也越来越少了。真没有办法，上面的也是真的不会。</p>\n<p>可能算法真的太长时间没有练了。总感觉很生疏。马虎大意可能也写错了。</p>\n<p>面试结果自我感觉不是太好。</p>\n<p>最后一个面试官问ACK包的结构是什么。（这个我真记不清了，只记着有确定要接收的数据的位数。可是当时也没说）。问我爬取页面时候标签匹配的是什么，我说匹配里面的内容，然后又问内容是什么，我说我爬取的就是这个。他又问如果爬其他的网站，里面是什么。我说里面页面还得看里面结构。他又回来说标签只爬这些吗。（我要爬的就是网站的标签啊。）。可能沟通起来真的有些许的问题。然后他说了一句：“真为你们导师担心”。（？？？）。我还是理解不来面试官要问的是什么。然后问问喜欢的课程，还有什么优势。（咱也不敢问是说技术优势还是人格优势）。应该说技术优势吧。我只说了我性格方面的。其实我也不知道这是技术面还是不是。补充听该说技术的吧。然后面试官不到10分钟就起身走人了。</p>\n<p>然后让说让我等人事的人。人事让我回来等消息，我说我最近有其他的offer，希望尽快。她说那就把那个签了吧。（8成没了吧。）</p>\n","categories":["面试总结"],"tags":["算法"]},{"title":"“记一次面试","url":"http://yoursite.com/2019/11/07/“记一次面试/","content":"<p>最近在拉勾网上投了很多简历，终于收到了几家的面试。总体来说还是很紧张。</p>\n<p>其实问题都是非常的基础的，但是被问到不会的问题后，就很慌张。</p>\n<p>好多问题都是会的，一慌张也就不会了。还得加强心理素质的训练啊。</p>\n<p>总结一下吧。</p>\n<p>说错的问题：</p>\n<p>mysql方面储存的知识还是太少了，很多问题是真的不清楚。</p>\n<p>平衡二叉树和红黑树的区别是插入和删除时候更少的调整。我说了便于查找。（脑子僵住了，哎。都是搜索树，怎么会和查找有关系）</p>\n<p>time_wait阶段是在client端，慌了以后说成了server端，怎么看time_wait字面也是不能是服务器的。（…….）</p>\n<p>linux的交换分区，这个可能之前没有太复习过linux，这个其实我之前看的虚拟内存吧。</p>\n<p>上次在光大银行面试时候也是在操作系统方面的问题。哎。</p>\n<p>下次面试希望别太紧张吧。加油，问题真的很基础。。</p>\n","categories":["面试总结"],"tags":["总结"]},{"title":"计算机网络部分","url":"http://yoursite.com/2019/11/04/计算机网络部分/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这个总结是根据拉勾网上面购买的课程进行自行梳理和总结。<a href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=1#/detail/pc?id=3\" target=\"_blank\" rel=\"noopener\">课程地址</a></p>\n<p>前段时间面试了几家公司，虽然都是考察的基础和项目，但是面试结果不是特别的理想，还是知识的掌握程度不够牢固，好多问题都是看过，但是当被问到时候，有的是立刻想出来，有的是没有说的太深。所以打算购买一个课程，重新总结和梳理一遍。</p>\n<h1 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h1><p><img src=\"/images/net.png\" alt=\"思维导图\"></p>\n<h1 id=\"4-7层网络模型\"><a href=\"#4-7层网络模型\" class=\"headerlink\" title=\"4/7层网络模型\"></a>4/7层网络模型</h1><p><img src=\"/images/seven.png\" alt=\"模型\"></p>\n<h1 id=\"TCP协议\"><a href=\"#TCP协议\" class=\"headerlink\" title=\"TCP协议\"></a>TCP协议</h1><h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><p><img src=\"/images/TCP.png\" alt=\"模型\"></p>\n<p>首先建立链接前需要 Server 端先监听端口，因此 Server 端建立链接前的初始状态就是 LISTEN 状态，这时 Client 端准备建立链接，先发送一个 SYN 同步包，发送完同步包后，Client 端的链接状态变成了 SYN_SENT 状态。Server 端收到 SYN 后，同意建立链接，会向 Client 端回复一个 ACK。</p>\n<p>由于 TCP 是双工传输，Server 端也会同时向 Client 端发送一个 SYN，申请 Server 向 Client 方向建立链接。发送完 ACK 和 SYN 后，Server 端的链接状态就变成了 SYN_RCVD。</p>\n<p>Client 收到 Server 的 ACK 后，Client 端的链接状态就变成了 ESTABLISHED 状态，同时，Client 向 Server 端发送 ACK，回复 Server 端的 SYN 请求。</p>\n<p>Server 端收到 Client 端的 ACK 后，Server 端的链接状态也就变成了的 ESTABLISHED 状态，此时建连完成，双方随时可以进行数据传输。</p>\n<h2 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h2><p><img src=\"/images/TCP4.png\" alt=\"模型\"></p>\n<p>TCP 链接的关闭，通信双方都可以先发起，我们暂且把先发起的一方看作 Client，从图中看出，通信中 Client 和 Server 两端的链接都是 ESTABLISHED 状态，然后 Client 先主动发起了关闭链接请求，Client 向 Server 发送了一个 FIN 包，表示 Client 端已经没有数据要发送了，然后 Client 进入了 FIN_WAIT_1 状态。</p>\n<p>Server 端收到 FIN 后，返回 ACK，然后进入 CLOSE_WAIT 状态。此时 Server 属于半关闭状态，因为此时 Client 向 Server 方向已经不会发送数据了，可是 Server 向 Client 端可能还有数据要发送。 </p>\n<p>当 Server 端数据发送完毕后，Server 端会向 Client 端发送 FIN，表示 Server 端也没有数据要发送了，此时 Server 进入 LAST_ACK 状态，就等待 Client 的应答就可以关闭链接了。</p>\n<p>Client 端收到 Server 端的 FIN 后，回复 ACK，然后进入 TIME_WAIT 状态。TIME_WAIT 状态下需要等待 2 倍的最大报文段生存时间，来保证链接的可靠关闭，之后才会进入 CLOSED 关闭状态。而 Server 端收到 ACK 后直接就进入 CLOSED 状态。</p>\n<h2 id=\"Nagel算法和ACK延迟\"><a href=\"#Nagel算法和ACK延迟\" class=\"headerlink\" title=\"Nagel算法和ACK延迟\"></a>Nagel算法和ACK延迟</h2><ol>\n<li>Nagle算法：</li>\n</ol>\n<p>是为了减少广域网的小分组数目，从而减小网络拥塞的出现；</p>\n<p>该算法要求一个tcp连接上最多只能有一个未被确认的未完成的小分组，在该分组ack到达之前不能发送其他的小分组，tcp需要收集这些少量的分组，并在ack到来时以一个分组的方式发送出去；其中小分组的定义是小于MSS的任何分组；</p>\n<p>该算法的优越之处在于它是自适应的，确认到达的越快，数据也就发哦送的越快；而在希望减少微小分组数目的低速广域网上，则会发送更少的分组；</p>\n<ol start=\"2\">\n<li>延迟ACK：</li>\n</ol>\n<p>如果tcp对每个数据包都发送一个ack确认，那么只是一个单独的数据包为了发送一个ack代价比较高，所以tcp会延迟一段时间，如果这段时间内有数据发送到对端，则捎带发送ack，如果在延迟ack定时器触发时候，发现ack尚未发送，则立即单独发送；</p>\n<p>延迟ACK好处：</p>\n<p>(1) 避免糊涂窗口综合症；</p>\n<p>(2) 发送数据的时候将ack捎带发送，不必单独发送ack；</p>\n<p>(3) 如果延迟时间内有多个数据段到达，那么允许协议栈发送一个ack确认多个报文段；</p>\n<ol start=\"3\">\n<li>当Nagle遇上延迟ACK：</li>\n</ol>\n<p>试想如下典型操作，写-写-读，即通过多个写小片数据向对端发送单个逻辑的操作，两次写数据长度小于MSS，当第一次写数据到达对端后，对端延迟ack，不发送ack，而本端因为要发送的数据长度小于MSS，所以nagle算法起作用，数据并不会立即发送，而是等待对端发送的第一次数据确认ack；这样的情况下，需要等待对端超时发送ack，然后本段才能发送第二次写的数据，从而造成延迟；</p>\n<ol start=\"4\">\n<li>关闭Nagle算法：</li>\n</ol>\n<p>使用TCP套接字选项TCP_NODELAY可以关闭套接字选项;</p>\n<p>如下场景考虑关闭Nagle算法：</p>\n<p>(1) 对端不向本端发送数据，并且对延时比较敏感的操作；这种操作没法捎带ack；</p>\n<p>(2) 如上写-写-读操作；对于此种情况，优先使用其他方式，而不是关闭Nagle算法：</p>\n<p>–使用writev，而不是两次调用write，单个writev调用会使tcp输出一次而不是两次，只产生一个tcp分节，这是首选方法；</p>\n<p>–把两次写操作的数据复制到单个缓冲区，然后对缓冲区调用一次write；</p>\n<p>–关闭Nagle算法，调用write两次；有损于网络，通常不考虑；</p>\n<h2 id=\"KEEPALIVE\"><a href=\"#KEEPALIVE\" class=\"headerlink\" title=\"KEEPALIVE\"></a>KEEPALIVE</h2><ol>\n<li>KeepAlive默认情况下是关闭的，可以被上层应用开启和关闭</li>\n<li><strong>tcp_keepalive_time</strong>: KeepAlive的空闲时长，或者说每次正常发送心跳的周期，默认值为7200s（2小时）</li>\n<li><strong>tcp_keepalive_intvl</strong>: KeepAlive探测包的发送间隔，默认值为75s</li>\n<li><strong>tcp_keepalive_probes</strong>: 在tcp_keepalive_time之后，没有接收到对方确认，继续发送保活探测包次数，默认值为9（次）</li>\n</ol>\n<h2 id=\"滑动窗口和流量控制\"><a href=\"#滑动窗口和流量控制\" class=\"headerlink\" title=\"滑动窗口和流量控制\"></a>滑动窗口和流量控制</h2><p> 滑动窗口协议是<strong>传输层进行流控</strong>的一种措施，<strong>接收方通过通告发送方自己的窗口大小</strong>，从而控制发送方的发送速度，从而达到防止发送方发送速度过快而导致自己被淹没的目的。 <a href=\"https://www.zhihu.com/question/32255109\" target=\"_blank\" rel=\"noopener\">TCP协议的滑动窗口具体是怎样控制流量的？</a></p>\n<h1 id=\"UDP协议\"><a href=\"#UDP协议\" class=\"headerlink\" title=\"UDP协议\"></a>UDP协议</h1><ol>\n<li><p>udp是无连接的</p>\n</li>\n<li><p>UDP使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的连接状态。</p>\n</li>\n<li><p>UDP没有拥塞控制，因此网络出现拥塞不会是源主机的发送速率降低。</p>\n</li>\n<li><p>UDP支持一对一，一对多，多对一和多对多的相互通信；</p>\n</li>\n<li><p>UDP的首部开销小，只有8个字节，比TCP的20个字节要短。</p>\n</li>\n</ol>\n<h1 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h1><h2 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h2><h3 id=\"Method\"><a href=\"#Method\" class=\"headerlink\" title=\"Method\"></a>Method</h3><ul>\n<li>get： 获取资源，当前网络中大部分是get</li>\n<li>post： 传输实体主体</li>\n<li>head:  获取报文首部</li>\n<li>put: 上传文件资源，自身不代验证机制，存在安全问题，不经常使用</li>\n<li>patch: 对资源进行部分修改</li>\n<li>options： 查询指定url支持的方法</li>\n<li>connect： 要求和指定url建立通道，使用ssl和tls协议把通信内容加密以后，经网络传输。</li>\n<li>trace： 追踪路径。服务器将通信路径返回给客户端。环回测试。</li>\n</ul>\n<h3 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h3><p>有四种类型的首部字段：通用首部字段、请求首部字段、响应首部字段和实体首部字段。</p>\n<h3 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h3><p>​        Cookie实际上是一小段的文字薪资。客户端请求服务器，如果服务器需要记录用户状态，就使用response向客户端浏览器颁发一个Cookie,而客户端浏览器会把Cookie储存起来。当浏览器在请求该网站的时候，浏览器就把请求的网址连同Cookie异同提交给服务器，服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。</p>\n<h3 id=\"URlEncode\"><a href=\"#URlEncode\" class=\"headerlink\" title=\"URlEncode\"></a>URlEncode</h3><p>urlencode是一个函数，可将字符串以URL编码，用于编码处理。</p>\n<p>URL编码(URL encoding)，也称作百分号编码(Percent-encoding)， 是特定上下文的统一资源定位符 (URL)的编码机制。</p>\n<p>适用于统一资源标识符(URI)的编码，也用于为”application/x-www-form-urlencoded” MIME准备数据， 因为它用于通过HTTP的请求操作(request)提交HTML表单数据。</p>\n<p>原理：</p>\n<p>将需要转码的字符转为16进制，然后从右到左，取4位(不足4位直接处理)，每2位做一位，前面加上%，编码成%XY格式。</p>\n<p>比如：</p>\n<p>空格<a href=\"https://baike.baidu.com/item/ASCII\" target=\"_blank\" rel=\"noopener\">ASCII</a>码是32，对应16进制是20，那么urlencode编码结果是:%20,但在新标准中空格对应的是+,见RFC-1738</p>\n<p>比如：</p>\n<p>中ASCII码是-10544，对应的16进制是D6D0，那么urlencode编码结果是:%D6%D0</p>\n<h2 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h2><p><img src=\"/images/zhuangtai.jpg\" alt=\"状态码\"></p>\n<h3 id=\"1XX-信息\"><a href=\"#1XX-信息\" class=\"headerlink\" title=\"1XX 信息\"></a>1XX 信息</h3><p>100 Continue ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。 </p>\n<h3 id=\"2XX-成功\"><a href=\"#2XX-成功\" class=\"headerlink\" title=\"2XX 成功\"></a>2XX 成功</h3><p>1、 200 OK</p>\n<p>2、204 No Content ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。 一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</p>\n<p>3、206 Partial Content ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容。</p>\n<h3 id=\"3XX-重定向\"><a href=\"#3XX-重定向\" class=\"headerlink\" title=\"3XX 重定向\"></a>3XX 重定向</h3><p>1、301 Moved Permanently ：永久性重定向； 2、302 Found ：临时性重定向；</p>\n<p>3、303 See Other ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</p>\n<p>注：虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方 法，但是大多数浏览器都会在 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法。</p>\n<p>4、304 Not Modified ：如果请求报文首部包含一些条件，例如：If-Match，If- Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条 件，则服务器会返回 304 状态码。</p>\n<p>5、307 Temporary Redirect ：临时重定向，与 302 的含义类似，但是 307 要求浏览器 不会把重定向请求的 POST 方法改成 GET 方法。</p>\n<h3 id=\"4XX-客户端错误\"><a href=\"#4XX-客户端错误\" class=\"headerlink\" title=\"4XX 客户端错误\"></a>4XX 客户端错误</h3><p>1、400 Bad Request ：请求报文中存在语法错误。</p>\n<p>2、401 Unauthorized ：该状态码表示发送的请求需要有认证信息（BASIC 认证、</p>\n<p>DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</p>\n<p>3、403 Forbidden ：请求被拒绝。</p>\n<p> 4、404 Not Found</p>\n<h3 id=\"5XX-服务器错误\"><a href=\"#5XX-服务器错误\" class=\"headerlink\" title=\"5XX 服务器错误\"></a>5XX 服务器错误</h3><p>1、500 Internal Server Error ：服务器正在执行请求时发生错误；</p>\n<p>2、503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护，现在无法处 理请求。</p>\n<h2 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h2><p>HTTPS：Hypertext Transfer Protocol Secure 超文本传输安全协议 TLS：<strong>位于 HTTP 和 TCP 之间的协议</strong>，其内部有 TLS 握手协议、TLS 记录协议</p>\n<p>HTTPS 经由进行通信，但利用来保证安全，即</p>\n<p><img src=\"/images/https.jpg\" alt=\"HTTPS\"></p>\n<p>1、客户端发送自己支持的加密规则给服务器，代表告诉服务器要进行连接了；</p>\n<p>2、服务器从中选出一套加密算法和 hash 算法以及自己的身份信息（地址等）以证书的形 式发送给浏览器，证书中包含服务器信息，加密公钥，证书的办法机构；</p>\n<p>3、客户端收到网站的证书之后要做下面的事情：</p>\n<p>（1）验证证书的合法性；</p>\n<p>（2）如果验证通过证书，浏览器会生成一串随机数，并用证书中的公钥进行加密；</p>\n<p>（3）用约定好的 hash 算法计算握手消息，然后用生成的密钥进行加密，然后一起发送给 服务器。</p>\n<p>4、服务器接收到客户端传送来的信息，要做下面的事情：</p>\n<p>（1）用私钥解析出密码，用密码解析握手消息，验证 hash 值是否和浏览器发来的一致；</p>\n<p>（2）使用密钥加密消息；</p>\n<p>5、如果计算法 hash 值一致，握手成功。 https 要知道的几个加密算法：</p>\n<p>握手的时候使用的非对称加密算法：用来加密握手之后的请求和应答；</p>\n<p>传输信息的时候使用的对称加密； 保证数据的完整性用的是 hash 算法（数字签名）</p>\n<h2 id=\"HTTP2\"><a href=\"#HTTP2\" class=\"headerlink\" title=\"HTTP2\"></a>HTTP2</h2><p>1、<strong>http2.0</strong> <strong>支持多路复用</strong>，同一个连接可以并发处理多个请求，方法是把 http 数据 包拆为多个帧，并发有序的发送，根据序号在另一端进行重组，而不需要一个个 http 请求顺序到达；</p>\n<p>2、<strong>http2.0 支持服务端推送</strong>，就是服务端在 http 请求到达后，除了返回数据之外， 还推送了额外的内容给客户端；</p>\n<p>3、<strong>http2.0 压缩了请求头</strong>，同时基本单位是二进制帧流，这样的数据占用空间更 少；</p>\n<p>4、<strong>http2.0 适用于 https 场景</strong>，因为其在 http 和 tcp 中间加了一层 ssl 层。</p>\n<h1 id=\"QUIC\"><a href=\"#QUIC\" class=\"headerlink\" title=\"QUIC\"></a>QUIC</h1><p><a href=\"https://zhuanlan.zhihu.com/p/32553477\" target=\"_blank\" rel=\"noopener\">科普：QUIC协议原理分析</a></p>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><p>[<a href=\"https://www.cnblogs.com/wanpengcoder/p/5366156.html\" target=\"_blank\" rel=\"noopener\">TCP之Nagle算法&amp;&amp;延迟ACK</a>]</p>\n<p>码农求职小助手公众号</p>\n","categories":["面试总结"],"tags":["计算机网络"]},{"title":"操作系统与计算机网络部分","url":"http://yoursite.com/2019/11/01/操作系统部分/","content":"<p>这个总结是根据拉勾网上面购买的课程进行自行梳理和总结。<a href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=1#/detail/pc?id=3\" target=\"_blank\" rel=\"noopener\">课程地址</a></p>\n<p>前段时间面试了几家公司，虽然都是考察的基础和项目，但是面试结果不是特别的理想，还是知识的掌握程度不够牢固，好多问题都是看过，但是当被问到时候，有的是立刻想出来，有的是没有说的太深。所以打算购买一个课程，重新总结和梳理一遍。</p>\n<p><img src=\"/images/linux.png\" alt=\"linux\"></p>\n<h1 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h1><h2 id=\"区别联系\"><a href=\"#区别联系\" class=\"headerlink\" title=\"区别联系\"></a>区别联系</h2><ul>\n<li><p>进程是资源分配的基本单位，线程是程序执行的最小单位。</p>\n</li>\n<li><p>进程有相互独立数据空间，线程分享进程的数据空间。</p>\n</li>\n<li><p>一个程序最少有一个进程，一个进程最少有一个线程。</p>\n</li>\n</ul>\n<h2 id=\"线程调度\"><a href=\"#线程调度\" class=\"headerlink\" title=\"线程调度\"></a>线程调度</h2><p> 时间片轮转调度、先来先服务调度、优先级调度、多级反馈队列调度以及高响应比优先调度 </p>\n<p>*<em>时间片轮转调度 *</em></p>\n<ul>\n<li><strong>时间片（quantum）</strong>：每个进程被分配一个时间段，即允许该进程在该时间段中运行，如果在时间片结束时该进程还在运行，则将剥夺CPU给下一个进程，如果该进程在时间片结束前阻塞或结束，则CPU立即切换</li>\n<li>假设n个就绪进程，时间片q，每个就绪进程得到1/n的CPU时间，任何就绪进程最多等待(n-1)q单位时间</li>\n<li>平均周转时间通常优于SJF</li>\n<li>响应时间一定优于SJF</li>\n<li>性能分析：<ul>\n<li>q如果很大，则FIFO</li>\n<li>q如果很小，则进程切换，或称上下文切换（context switch）开销太大，所谓上下文切换是：从一个进程切换到另一个进程是需要一定的时间的，所以q必须远远大于上下文切换时间</li>\n</ul>\n</li>\n<li>结论：时间片设得太短会导致过多的进程切换，降低了CPU的效率；而设得太长有可能引起对短的交互请求的响应时间变长，通常将时间片设为20ms~50ms是合理的这种</li>\n</ul>\n<p><strong>先来先服务（FCFS：first-come first-served）</strong></p>\n<ul>\n<li>容易理解：建立一个队列，选取进程运行时，从队列头部选取，添加进程时，添加到队列的尾部</li>\n<li>但是通过例子可以发现，短进程比长进程先执行，平均等待时间会缩短</li>\n</ul>\n<p><strong>优先级调度（Priority Schedule）</strong></p>\n<ul>\n<li>每个进程都有一个优先数（priority number），通常是整数</li>\n<li>Scheduler每次会选取就绪队列中，优先级最高的进程执行</li>\n<li>当优先级定义为“进程需要的CPU时间”时，SJF算法就是优先级调度</li>\n<li>优先级可由系统动态确定，例如：有些进程为I/O密集型，其多数时间在等待I/O操作，当这样的进程需要CPU时，应尽快地给它CPU，已便它能很快地执行完CPU操作然后去等待I/O操作，下一个进程就可以同时进入CPU。如何实现这样的效果呢？一个简单算法：其优先级设为1/f，f为该进程在上一个时间片所占的部分。</li>\n<li><strong>进程饥饿（Starvation）</strong>：优先级较低的进程可能永远得不到CPU</li>\n<li>解决：Aging思想，优先级要考虑就绪进程在就绪队列里的等待时间，因此，若一个进程在就绪队列中等待，那它的优先级会单调递增</li>\n</ul>\n<p><strong>多级反馈队列（Multilevel Feedback Queue）</strong></p>\n<ul>\n<li>基于多级队列，但另外考虑了进程在就绪队列之间可以迁移</li>\n<li>定义这样的算法应该着重考虑：<ul>\n<li>队列个数</li>\n<li>每级队列的调度算法</li>\n<li>如何将就绪进程升级至高层次队列</li>\n<li>如何将就绪进程降低至低层次队列</li>\n<li>当一个就绪进程进入就绪队列时，应该去哪一级？</li>\n</ul>\n</li>\n</ul>\n<p><strong>最短作业优先法（shortest job first）</strong></p>\n<ul>\n<li>前提：预知进入就绪队列的进程执行时间</li>\n<li>原理：假设有4个进程，其运行时间分别为a，b，c，d，第一个进程在a时刻结束，第二个进程在a+b时刻结束，以此类推，平均周转时间为（4a+3b+2c+d）/4，可以看到a对平均值的影响最大，所以a应该取最小值才好，这样平均周转时间才能取到最小值</li>\n<li>抢占式SJF算法：当一个进程进入就绪队列，如果它的CPU时间小于当前拥有CPU的进程的剩余“预估”时间，前者抢占后者的CPU，称为 Shortest-Remaining-Time-First(SRTF)，不能实现</li>\n<li>SJF算法是最优的算法</li>\n<li>SJF有致命缺陷，如何预估进入就绪队列的进程的执行时间？<ul>\n<li>不可能准确地预测，比如需要用户输入，这是不可知的</li>\n<li>只能根据过去的CPU burst cycle来预测</li>\n</ul>\n</li>\n<li>HRN（Highest response Ratio Next）<ul>\n<li>HRN = （W + T）/ T</li>\n<li>W为等待时间，T代表预估CPU时间</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"线程切换步骤\"><a href=\"#线程切换步骤\" class=\"headerlink\" title=\"线程切换步骤\"></a>线程切换步骤</h2><p> 先把前一个任务的 CPU 上下文（也就是 CPU 寄存器和程序计数器）保存起来，然后加载新任务的上下文到这些寄存器和程序计数器，最后再跳转到程序计数器所指的新位置，运行新任务。 </p>\n<h2 id=\"进程通讯（-IPC-）\"><a href=\"#进程通讯（-IPC-）\" class=\"headerlink\" title=\"进程通讯（ IPC ）\"></a>进程通讯（ IPC ）</h2><ul>\n<li><p>管道（Pipe）及有名管道（named pipe）：管道可用于具有亲缘关系进程间的通信，有名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信；</p>\n</li>\n<li><p>报文（MessageQueue）队列（消息队列）：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p>\n</li>\n<li><p>共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。</p>\n</li>\n<li><p>套接口（UnixSocket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。</p>\n</li>\n<li><p>信号（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数）；</p>\n</li>\n<li><p>信号量（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。</p>\n</li>\n</ul>\n<h2 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h2><p> 协程更轻量化，是在用户态进行调度，切换的代价比线程上下文切换要低很多 </p>\n<p><strong>JAVA的框架</strong></p>\n<p>Quasar原理</p>\n<p>1、利用字节码增强，将普通的java代码转换为支持协程的代码。<br>2、在调用pausable方法的时候，如果pause了就保存当前方法栈的State，停止执行当前协程，将控制权交给调度器<br>3、调度器负责调度就绪的协程<br>4、协程resume的时候，自动恢复State，根据协程的pc计数跳转到上次执行的位置，继续执行 </p>\n<h1 id=\"Linux常见命令\"><a href=\"#Linux常见命令\" class=\"headerlink\" title=\"Linux常见命令\"></a>Linux常见命令</h1><p><a href=\"https://www.jianshu.com/p/0056d671ea6d\" target=\"_blank\" rel=\"noopener\">linux的常见命令</a></p>\n<p> 介绍一下主要的工具：AWK、top、netstat、grep  </p>\n<p><strong>AWK</strong>： <a href=\"http://www.ruanyifeng.com/blog/2018/11/awk.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2018/11/awk.html</a> </p>\n<p><strong>top</strong>: top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。</p>\n<p>top显示系统当前的进程和其他状况,是一个动态显示过程,即可以通过用户按键来不断刷新当前状态.如果在前台执行该命令,它将独占前台,直到用户终止该程序为止. 比较准确的说,top命令提供了实时的对系统处理器的状态监视.它将显示系统中CPU最“敏感”的任务列表.该命令可以按CPU使用.内存使用和执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定. </p>\n<p><strong>netstat</strong>: netstat命令用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。</p>\n<p>如果你的计算机有时候接收到的数据报导致出错数据或故障，你不必感到奇怪，TCP/IP可以容许这些类型的错误，并能够自动重发数据报。但如果累计的出错情况数目占到所接收的IP数据报相当大的百分比，或者它的数目正迅速增加，那么你就应该使用netstat查一查为什么会出现这些情况了。</p>\n<p><strong>grep</strong>：Linux grep 命令用于查找文件里符合条件的字符串。</p>\n<p>grep 指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为 <strong>-</strong>，则 grep 指令会从标准输入设备读取数据。</p>\n<p><strong>less和tail</strong>:文本查看工具，less是分页显示的工具，tail是从尾部查看文件。</p>\n<h1 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h1><p>在多线程时候在整理</p>\n<h1 id=\"内存分页管理与Swap\"><a href=\"#内存分页管理与Swap\" class=\"headerlink\" title=\"内存分页管理与Swap\"></a>内存分页管理与Swap</h1><p><a href=\"https://www.cnblogs.com/chbo/p/10511022.html\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n<h1 id=\"任务队列和CPU-Load\"><a href=\"#任务队列和CPU-Load\" class=\"headerlink\" title=\"任务队列和CPU Load\"></a>任务队列和CPU Load</h1><h1 id=\"拓展知识点\"><a href=\"#拓展知识点\" class=\"headerlink\" title=\"拓展知识点\"></a>拓展知识点</h1><ul>\n<li><strong>内存屏障</strong></li>\n</ul>\n<p>也称内存栅栏，内存栅障，屏障指令等，是一类<a href=\"https://zh.wikipedia.org/wiki/同步屏障\" target=\"_blank\" rel=\"noopener\">同步屏障</a>指令，它使得 CPU 或编译器在对内存进行操作的时候, 严格按照一定的顺序来执行, 也就是说在memory barrier 之前的指令和memory barrier之后的指令不会由于系统优化等原因而导致乱序。大多数现代计算机为了提高性能而采取<a href=\"https://zh.wikipedia.org/wiki/乱序执行\" target=\"_blank\" rel=\"noopener\">乱序执行</a>，这使得内存屏障成为必须。</p>\n<ul>\n<li><strong>指令乱序</strong></li>\n</ul>\n<p><a href=\"https://blog.csdn.net/dd864140130/article/details/56494925\" target=\"_blank\" rel=\"noopener\">谈乱序执行和内存屏障</a></p>\n<ul>\n<li><strong>分支预测</strong></li>\n</ul>\n<p><a href=\"https://zhuanlan.zhihu.com/p/22469702\" target=\"_blank\" rel=\"noopener\">深入理解CPU的分支预测(Branch Prediction)模型</a></p>\n<ul>\n<li>CUP亲和性</li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/LubinLew/p/cpu_affinity.html\" target=\"_blank\" rel=\"noopener\">Linux中CPU亲和性(affinity)</a></p>\n<ul>\n<li>netfilter和iptables</li>\n</ul>\n<p>[<a href=\"https://www.cnblogs.com/sparkdev/p/9328713.html\" target=\"_blank\" rel=\"noopener\">netfilter/iptables 简介</a>]:防火墙</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://www.jianshu.com/p/91c8600cb2ae\" target=\"_blank\" rel=\"noopener\">操作系统——进程、线程、调度</a></p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/linux/l-ipc/index.html\" target=\"_blank\" rel=\"noopener\">深刻理解Linux进程间通信（IPC）</a></p>\n<p><a href=\"https://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316399.html\" target=\"_blank\" rel=\"noopener\">linux的top命令参数详解</a> </p>\n<p><a href=\"https://www.cnblogs.com/peida/archive/2013/03/08/2949194.html\" target=\"_blank\" rel=\"noopener\"> <a href=\"https://www.cnblogs.com/peida/\" target=\"_blank\" rel=\"noopener\">竹子-博客(.NET/Java/Linux/架构/管理/敏捷)</a> </a></p>\n","categories":["面试总结"],"tags":["操作系统"]},{"title":"写递归代码时候出现的一个小问题","url":"http://yoursite.com/2019/10/25/写递归代码时候出现的一个小问题/","content":"<p>几天写一个算法的时候出现了一个小问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">public class TreeNode &#123;</span><br><span class=\"line\">    int val = 0;</span><br><span class=\"line\">    TreeNode left = null;</span><br><span class=\"line\">    TreeNode right = null;</span><br><span class=\"line\"></span><br><span class=\"line\">    public TreeNode(int val) &#123;</span><br><span class=\"line\">        this.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*/</span><br><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public boolean HasSubtree(TreeNode root1,TreeNode root2) &#123;</span><br><span class=\"line\">        if(root1 == null || root2 == null)&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(root1.val  == root2.val)&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">                return judge(root1,root2);</span><br><span class=\"line\">           </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return HasSubtree(root1.left,root2) || HasSubtree(root1.right,root2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public  boolean  judge(TreeNode root1,TreeNode root2)&#123;</span><br><span class=\"line\">        if(root2 == null)&#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(root1 == null)&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(root1.val == root2.val)&#123;</span><br><span class=\"line\">            return judge(root1.left,root2.left) &amp;&amp; judge(root1.right,root2.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译结果出现错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(root1.val  == root2.val)&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">                return judge(root1,root2);</span><br><span class=\"line\">           </span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>自习找了一下，发现在</p>\n<p> 所以我改成 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(root1.val  == root2.val)&#123;</span><br><span class=\"line\">          if(judge(root1,root2))&#123;</span><br><span class=\"line\">              return true;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["遇到的各种bug"],"tags":["代码"]},{"title":"JVM学习笔记","url":"http://yoursite.com/2019/10/16/JVM学习笔记/","content":"<h1 id=\"运行时数据区域：\"><a href=\"#运行时数据区域：\" class=\"headerlink\" title=\"运行时数据区域：\"></a>运行时数据区域：</h1><p>程序计数器，java虚拟机栈，本地方法区，堆，方法区（运行时常量池）。</p>\n<ul>\n<li>程序计数器：记录正在执行的虚拟机字节码指令的地址（执行的为本地方法就为空）。</li>\n<li>Java虚拟机栈：每个java方法在执行的同时会创建一个栈帧用于存储局部变量表，操作数表栈，常量池引用等信息。从方法调用直至执行完成的过程，对应着一个栈帧在java虚拟机栈中的入栈和出栈的过程。<br>可以通过-Xss这个虚拟机参数来指定每一个线程的Java虚拟机栈内存大小，在JDK1.4中默认是256k，儿子啊JDK1.5位1M。<br>java -Xss HackJava</li>\n<li>本地方法栈：本地方法栈与Java虚拟机栈类似，他们之间的钱包瘪只不过是本地方法栈为本地方法服务<br>本地方法一般是用其他语言编写的，并且被便以为基于本机硬件和操作系统的程序，对待这些地方需要特别处理。</li>\n<li>堆：所有对象都在这里分配内存，是垃圾回收的主要区域<br>现代的垃圾收集器基本都是采用分带收集算法，其主要的思想是针对不同类型的对象采用不同的垃圾回收算法。可以将堆分为两代<br>新生代和老年代。<br>堆不需要连续内存，并且可以动态增加其内存，增加失败会报错：OutOfMenoryError异常<br>可以通过-Xms和-Xmx这两个虚拟机参数指定一个程序的堆内存的大小，第一个参数设置初始值，第二个参数设置最大值<br>java -Xms 1M -Xmx2M HackTheJava</li>\n<li>方法区：用于存放已被加载的类信息、常量、静态变量、及时编译器编译后的代码等数据<br>和堆一样不需要梁旭的内存，并且可以动态扩展，一样跑出错误<br>对这块区域进行垃圾回收的主要目标是对常量池的回收和堆类的卸载，但一般比较困难实现。</li>\n</ul>\n<h1 id=\"垃圾回收：\"><a href=\"#垃圾回收：\" class=\"headerlink\" title=\"垃圾回收：\"></a>垃圾回收：</h1><ul>\n<li>可达性分析算法：<br>以GCRoot为起始点进行搜索，可达的对象都是存活的，不可达的对象都是可回收的。<br>GCRoot一般包含以下内容</li>\n</ul>\n<ol>\n<li>虚拟机栈中局部变量表中引用的对象</li>\n<li>本地方法栈中JNI中引用的对象</li>\n<li>方法区中类静态属性引用的对象</li>\n<li>方法区中的常量引用对象<br>方法区的回收：<br>finalize（）实现自救<br>四种引用类型：强引用，软引用，弱引用，虚引用</li>\n</ol>\n<h1 id=\"垃圾收集算法：\"><a href=\"#垃圾收集算法：\" class=\"headerlink\" title=\"垃圾收集算法：\"></a>垃圾收集算法：</h1><ol>\n<li>标记 - 清除<br>标记阶段：程序会检查每个对象是否是活动对象，如果是活动对象，则程序会在对象头部打上标记。<br>清除阶段：进行对象回收并取标记位，另外，还会判断回收后的分块与前一个空想分块是否连续。连续就合并，<br>回收对象就是把对象作为分块，连接到空闲链表中。</li>\n<li>标记 - 整理<br>让所有的存活对象向一端移动，然后直接清理掉端边界以外的内存。</li>\n<li>复制<br>将内存划分为大小相等的两块，每次只能使用其中的一块，只一块用完以后就将存活的复制到另一块上去，把使用的空间进行一次清理<br>现代的虚拟机采用这个方法回收新生代，一个大的Eden和两个小的Survivor。每次使用一个Eden和一个Survior，然后复制到另一个Servior<br>Survivor存储不下就放到老年代。</li>\n</ol>\n<ul>\n<li>分代收集<br>将堆分为新生代和老年代。<br>新生代使用复制算法，老年代使用标记清除或者标记整理</li>\n</ul>\n<h1 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h1><p>除了CMS个G1之外，其他的垃圾收集器都是以串行的方式执行</p>\n<ol>\n<li><p>Serial（串行）收集器 在Client场景下的默认新生代收集器</p>\n</li>\n<li><p>ParNew收集器：他是Serial收集器的多线程版本，在Server场景下的默认新生代收集器</p>\n</li>\n<li><p>Parallel Scavenge收集器 ： 多线程收集器，</p>\n</li>\n<li><p>Serial Old收集器： 老年代的串行收集器</p>\n</li>\n<li><p>Parallel Old收集器： 老年代多线程的串行收集器</p>\n</li>\n<li><p>CMS收集器：标记清除<br>四个阶段<br>初始标记：仅仅只标记一下GC Roots能直接关联到的对象，速度很快，需要停顿。<br>并发标记：进行GC Roots Tracing过程，整个回收过程中好事最长，不需要停顿。<br>重新标记：为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那部分标记，需要停顿。<br>并发清除。</p>\n</li>\n<li><p>G1收集器：</p>\n</li>\n</ol>\n<h1 id=\"内存分配和回收策略\"><a href=\"#内存分配和回收策略\" class=\"headerlink\" title=\"内存分配和回收策略\"></a>内存分配和回收策略</h1><p>Minor GC 和 Full GC<br>MinorGC回收新生代，频繁调用<br>FullGC回收老年代和新生代，少执行，时间长。</p>\n<h1 id=\"内存分配策略\"><a href=\"#内存分配策略\" class=\"headerlink\" title=\"内存分配策略\"></a>内存分配策略</h1><ol>\n<li>对象优先在Eden分配</li>\n<li>大对象直接进入老年代（长字符串和数组）</li>\n<li>长期存活的对象直接进入老年代</li>\n<li>动态进入老年代</li>\n<li>空间分配担保</li>\n</ol>\n<p>进行Full GC的条件：<br>老年代空间不足，空间分配担保失败</p>\n<h1 id=\"类加载机制：\"><a href=\"#类加载机制：\" class=\"headerlink\" title=\"类加载机制：\"></a>类加载机制：</h1><p>在运行时动态加载的，因为会占用空间。<br>加载，验证，准备，解析，初始化，使用，卸载。</p>\n<p>类的加载过程包括<br>加载，验证，准备，解析，初始化。<br>类加载器：启动类加载器，在javahome的lib中，扩展类加载器，应用程序类加载器。</p>\n","categories":["学习笔记"],"tags":["JVM"]},{"title":"git常用命令总结","url":"http://yoursite.com/2019/09/15/git常用命令总结/","content":"<h1 id=\"新建代码库\"><a href=\"#新建代码库\" class=\"headerlink\" title=\"新建代码库\"></a>新建代码库</h1><ul>\n<li><p>在当前目录新建代码库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建目录，将其初始化为git代码库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init project-name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载一个项目到本地</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cloen url</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><ul>\n<li><p>显示当前git配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑git配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config -e [--global]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置提交代码时候的用户信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config [--global] user.name &quot;[name]&quot;</span><br><span class=\"line\">git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"增加删除文件\"><a href=\"#增加删除文件\" class=\"headerlink\" title=\"增加删除文件\"></a>增加删除文件</h1><ul>\n<li><p>添加指定文件到暂存区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add [file1] [file2] ....</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加指定目录到暂存区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add [dir]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加当前目录的所有文件到暂存区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加每个变化前，都会要求确认，添加同一个文件的多处变化，可以实现分次提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -p</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除工作区文件，并且将这次删除放入暂存区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>停止追踪指定文件，但该文件保留在工作区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gir rm --cached [file]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>改名文件并且将这个改名文件放在暂存区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git mv [file-original] [file-rebnmaed]</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h1><ul>\n<li><p>提交暂存区到仓库区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m [message]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提交暂存区的指定文件到仓库区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit [file1][file2] ... -m [message]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提交工作区自上次commit之后的拜年话，直接到仓库区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提交时显示所有的区别信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -v</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用一次新的commit，替代上一次的提交，如果代码没有任何新的变化，贼用来改写上一次comment的提交信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -amend -m [message]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重做上一次commit，并包括指定文件的新变化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -amend [file1][file2]...</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><ul>\n<li><p>列出所有本地分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列出所有远程分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列出所有本地分支和远程分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个分支，但依然停留在当前分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch [branch-name]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个分支，并切换到新建分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b [branch]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个分支，指向指定commit</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch [branch][commit]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个分支，与指定的远程分支建立追踪关系</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --track [branch][remote-branch]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换到指定分支，并更新工作区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout [branch-name]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换到上一个分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git chechout -</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建立追踪关系，在现有分支与指定的远程分支之间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --set-upstream [branch][remote-branch]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并指定分支和当前分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge [branch]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选择一个commit，合并进当前分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry -pick [branch-name]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d [branch-name]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除远程分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --delete [branch-name]</span><br><span class=\"line\">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h1><ul>\n<li><p>列出所有tag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个tag在当前的commit</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag [tag]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个tag在指定commit</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag [commit]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除本地tag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d [tag]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除远程tag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin :refs/tags/[tagname]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看tag信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show [tag]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提交指定的tag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push [remote] [tag]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提交所有tag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push [remote] --tags</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个分支，指向某个tag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h1><ul>\n<li><p>显示所有变更信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示当前分支的历史版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示commit历史，以及每次commit发生更换的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --stat</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>搜索历史提交，根据关键词</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git long -S [keyword]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示某个commit之后的所有变化，其“提交说明”必须符合搜索条件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log [tag] HEAD --grep feature</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示某个文件的版本历史，包括文件改名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --follow [file]</span><br><span class=\"line\">git whatchanged [file]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示指定文件相关的每一次diff</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -p [file]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示过去五次提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -5 --pretty --oneline</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示所有提交过的用户，按提交次数排序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git shor tlog -sn</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示指定文件是什么人在什么时间修改过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git blame [file]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示暂存区和工作区的差别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示暂存区和上一个commit的差别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --cached [file]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示两次提交之间的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示今天你写了多少行代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --shorststat &quot;@&#123;0 day ago&#125;&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示某次提交的元数据和内容变化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show [commit]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示每次提交发生变化的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show --name-only [commit]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示某次提交时，某个文件的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show [commit]:[filename]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示当前分支的最近几次提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h1><ul>\n<li><p>下载远程仓库的所有变化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch [remote]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示所有远程仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示某远程仓库的信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote show [remote]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>增加一个新的远程仓库，并命名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add [shortname][url]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取回远程仓库的变化，并与本地分支合并</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull [remote] [branch]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上传本地指定分支到远程仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push [remote] [branch]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>强行推送当前分支到远程仓库，即使有冲突</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push [remote] --force</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送所有分支到远程仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push [remote] --all</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h1><ul>\n<li><p>恢复暂存区的指定文件到工作区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout [file]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>恢复某个commit的指定文件到暂存区和工作区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout [commit] [file]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>恢复暂存区的所有文件到工作区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fir checkout</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重置暂存区的指定文件，与上一次commit保持一致，但是工作区不变</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fir reset [file]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重置暂存区与工作区，与上一次commit保持一致</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset [commit]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重置当前分支的HEAD为指定commit，同事重置暂存区和工作区，与指定commit一致</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard [commit]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重置当前HEAD为指定commit，但保持暂存区和工作区不变\\</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --keep [commit]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个commit，用来撤销指定commit，后者的所有变化都将被前者抵消，并且应用到当前分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert [commit]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>暂时未提交的变化移除，稍后再移入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","categories":["知识总结"],"tags":["git"]},{"title":"LeetCode第三题","url":"http://yoursite.com/2019/09/09/LeetCode第三题/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: &quot;abcabcbb&quot;</span><br><span class=\"line\">Output: 3 </span><br><span class=\"line\">Explanation: The answer is &quot;abc&quot;, with the length of 3.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: &quot;bbbbb&quot;</span><br><span class=\"line\">Output: 1</span><br><span class=\"line\">Explanation: The answer is &quot;b&quot;, with the length of 1.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 3:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: &quot;pwwkew&quot;</span><br><span class=\"line\">Output: 3</span><br><span class=\"line\">Explanation: The answer is &quot;wke&quot;, with the length of 3. </span><br><span class=\"line\">             Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><ul>\n<li>双指针问题</li>\n<li>利用java的set集合</li>\n<li>从第一个字母开始遍历，由于set集合的不可重复性，所以遇到重复便更换前进指针</li>\n<li>记录最大的长度</li>\n<li>比如，“abccabcbb”   开始，i指针开始指针a,j指针也从a开始向后遍历，当遇到第二个c时候停在第二个c，开始移动i，知道i遍历到第三个c停止，i继续前几一个，无重复便继续前进。</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public int lengthOfLongestSubstring(String s) &#123;</span><br><span class=\"line\">\t     Set&lt;Character&gt; set = new HashSet&lt;Character&gt;();</span><br><span class=\"line\">        int length = s.length(),i=0,j=0,result=0;</span><br><span class=\"line\">        while(i&lt;length&amp;&amp;j&lt;length)&#123;</span><br><span class=\"line\">            if(set.contains(s.charAt(j)))&#123;</span><br><span class=\"line\">                set.remove(s.charAt(i++));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                set.add(s.charAt(j++));</span><br><span class=\"line\">                result = Math.max(result,j-i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["算法","LeetCode"]},{"title":"LeetCode第四题","url":"http://yoursite.com/2019/09/09/LeetCode第四题/","content":"<h1 id=\"题目：\"><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h1><p>There are two sorted arrays <strong>nums1</strong> and <strong>nums2</strong> of size m and n respectively.</p>\n<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>\n<p>You may assume <strong>nums1</strong> and <strong>nums2</strong> cannot be both empty.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums1 = [1, 3]</span><br><span class=\"line\">nums2 = [2]</span><br><span class=\"line\"></span><br><span class=\"line\">The median is 2.0</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums1 = [1, 2]</span><br><span class=\"line\">nums2 = [3, 4]</span><br><span class=\"line\"></span><br><span class=\"line\">The median is (2 + 3)/2 = 2.5</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><ul>\n<li>类似于插入排序</li>\n<li>设置一个辅助数组，把输入的两个数组重新进行排序</li>\n<li>中间的数就是中位数</li>\n<li>总数单数为中间数，偶数为中间两个数的平均数</li>\n</ul>\n<h1 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public double findMedianSortedArrays(int[] nums1, int[] nums2) &#123;</span><br><span class=\"line\">       int max = nums1.length+nums2.length;//计算两个数组的总长度</span><br><span class=\"line\">            int[] nums= new int[max];、、新建辅助数组</span><br><span class=\"line\">            int i=0,j=0;//分别指向两个数组的第一个数</span><br><span class=\"line\">            int k = 0; //记录辅助数组下标</span><br><span class=\"line\">            while (i&lt;nums1.length&amp;&amp;j&lt;nums2.length)&#123;</span><br><span class=\"line\">            //从小到大排序</span><br><span class=\"line\">                if (nums1[i] &lt; nums2[j])&#123;</span><br><span class=\"line\">                    nums[k++] = nums1[i++];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else</span><br><span class=\"line\">                    nums[k++] = nums2[j++];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            while (i &lt; nums1.length)&#123;//nums2遍历完</span><br><span class=\"line\">                nums[k++] = nums1[i++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            while (j &lt; nums2.length)&#123;//nums1已经遍历完</span><br><span class=\"line\">                nums[k++] = nums2[j++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (max%2 == 0)&#123;//总数为偶数</span><br><span class=\"line\">                return (double)(nums[max/2-1]+nums[max/2])/2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return (double)nums[max/2];//总数为基数</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["算法","LeetCode"]},{"title":"腾讯云搭建大数据环境","url":"http://yoursite.com/2019/09/08/腾讯云搭建大数据环境/","content":"<p>文档内含有图片，已经将包和文档传到github：<a href=\"https://github.com/cy486/HADOOP-LEARNING\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<p>这次使用的数据包版本：</p>\n","categories":["教程"],"tags":["hadoop","腾讯云"]},{"title":"window本地使用IDEA操作服务器上的hadoop完成mapreduce","url":"http://yoursite.com/2019/09/03/window本地使用IDEA操作服务器上的hadoop完成mapreduce/","content":"<h1 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h1><ul>\n<li><p>本机window下载和服务器相同的hadoop版本并解压</p>\n</li>\n<li><p>下载hadoop.dll和winutil.exe.<a href=\"https://github.com/steveloughran/winutils\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n</li>\n<li><p>把上面两个文件加到hadoop的bin目录下</p>\n</li>\n<li><p>把hadoop.dll加入到C:\\Windows\\System32目录下</p>\n</li>\n<li><p>把hadoop解压目录加到环境变量中</p>\n</li>\n<li><p>HADOOP_HOME值为hadoop的目录，在Path里面加上%HADOOP_HOME%/bin</p>\n</li>\n</ul>\n<h1 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.gao.Util;/*</span><br><span class=\"line\"> * @Author chengpunan</span><br><span class=\"line\"> * @Description //TODO $</span><br><span class=\"line\"> * @Date $ $</span><br><span class=\"line\"> * @Param $</span><br><span class=\"line\"> * @return $</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">import java.net.URI;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\">import org.apache.hadoop.fs.FSDataInputStream;</span><br><span class=\"line\">import org.apache.hadoop.fs.FileSystem;</span><br><span class=\"line\">import org.apache.hadoop.fs.Path;</span><br><span class=\"line\">import org.apache.log4j.Logger;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 读取hdfs上指定文件中的内容</span><br><span class=\"line\"> * @company 源辰信息</span><br><span class=\"line\"> * @author navy</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class FindHDFSText &#123;</span><br><span class=\"line\">    private static Logger log = Logger.getLogger(FindHDFSText.class);// 创建日志记录器</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        FileSystem fs = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Configuration conf = new Configuration();// 加载配置文件</span><br><span class=\"line\">            Path p= new Path(&quot;hdfs://****:9000/data/output/part-r-00000&quot;);//自己hdfs里面存在的文件</span><br><span class=\"line\">            fs = p.getFileSystem(conf);</span><br><span class=\"line\">            System.out.println(&quot;要查看的文件路径为：&quot;+fs.getFileStatus(p).getPath());</span><br><span class=\"line\"></span><br><span class=\"line\">            FSDataInputStream fsin = fs.open(p);</span><br><span class=\"line\">            byte[] bs = new byte[1024 * 1024];</span><br><span class=\"line\">            int len = 0;</span><br><span class=\"line\">            while((len = fsin.read(bs)) != -1)&#123;</span><br><span class=\"line\">                System.out.print(new String(bs, 0, len));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">            fsin.close();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            log.error(&quot;hdfs操作失败!!!&quot;, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["教程"],"tags":["hadoop"]},{"title":"ubuntu下安装ftp","url":"http://yoursite.com/2019/09/02/ubuntu下安装ftp/","content":"<h1 id=\"1、安装vsftpd\"><a href=\"#1、安装vsftpd\" class=\"headerlink\" title=\"1、安装vsftpd\"></a>1、安装vsftpd</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2、创建ftp用户\"><a href=\"#2、创建ftp用户\" class=\"headerlink\" title=\"2、创建ftp用户\"></a>2、创建ftp用户</h1><ol>\n<li>创建用户目录 </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /home/uftp</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>创建用户</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo useradd -d /home/uftp -s /bin/bash uftp</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>修改密码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo passwd uftp</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-配置vsftpd-conf\"><a href=\"#3-配置vsftpd-conf\" class=\"headerlink\" title=\"3. 配置vsftpd.conf\"></a>3. 配置vsftpd.conf</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>\n\n<p>打开后：按i</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userlist_deny=NO</span><br><span class=\"line\">userlist_enable=YES</span><br><span class=\"line\">#允许登录的用户</span><br><span class=\"line\">userlist_file=/etc/allowed_users</span><br><span class=\"line\">seccomp_sandbox=NO</span><br><span class=\"line\">#默认ftp下载目录</span><br><span class=\"line\">local_root=/home/uftp/</span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\">#设置文件上传</span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\">#使用utf8</span><br><span class=\"line\">utf8_filesystem=YES</span><br></pre></td></tr></table></figure>\n\n<p>允许用户登录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/allowed_users</span><br></pre></td></tr></table></figure>\n\n<p>在文件夹中加入uftp，保存退出</p>\n<h1 id=\"给予权限\"><a href=\"#给予权限\" class=\"headerlink\" title=\"给予权限\"></a>给予权限</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R uftp /home/uftp</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"启动停止重启服务\"><a href=\"#启动停止重启服务\" class=\"headerlink\" title=\"启动停止重启服务\"></a>启动停止重启服务</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/vsftpd start</span><br><span class=\"line\">sudo /etc/init.d/vsftpd stop</span><br><span class=\"line\">sudo /etc/init.d/vsftpd restart</span><br></pre></td></tr></table></figure>\n\n","categories":["教程"],"tags":["ftp","ubuntu"]},{"title":"mysql8.0版本的驱动问题","url":"http://yoursite.com/2019/09/01/mysql8-0版本的驱动问题/","content":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>由于重新装了一遍系统，下载了最新版本的mysql。今天在写项目的时候，jdbc的链接出现了问题，上网查找了好久，终于找到解决办法和原因。</p>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><ul>\n<li><p>使用新版本的mysql连接jar包。</p>\n</li>\n<li><p>更换连接的drive和url代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver=com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">url=jdbc:mysql://localhost:3306/kettleuseUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=GMT</span><br><span class=\"line\">user=root</span><br><span class=\"line\">password=root</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用kettle时候也出现了同样的问题\"><a href=\"#使用kettle时候也出现了同样的问题\" class=\"headerlink\" title=\"使用kettle时候也出现了同样的问题\"></a>使用kettle时候也出现了同样的问题</h1><p>对于 8.x 版本的 MySQL，jdbc 连接驱动方式有所变化，不能使用现有的 MySQL 连接配置方式，需要使用自定义 jdbc 连接方式（数据库类型选择<strong>Generic Database</strong>），jdbc驱动jar需要使用<strong>8.x.jar</strong></p>\n<ul>\n<li>jdbc.driver=com.mysql.cj.jdbc.Driver</li>\n<li>jdbc.url=jdbc:<a href=\"http://kcd.nivalsoul.cn/forward?goto=\" target=\"_blank\" rel=\"noopener\">mysql://localhost:3306/sys_test?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;zeroDateTimeBehavior=CONVERT_TO_NULL</a></li>\n<li>jdbc.username=root</li>\n<li>jdbc.password=root</li>\n</ul>\n</li>\n</ul>\n","categories":["遇到的各种bug"],"tags":["mysql"]},{"title":"原生js实现省市县三级联动","url":"http://yoursite.com/2019/08/31/原生js实现省市县三级联动/","content":"<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><ul>\n<li>首先设置数据创造三个数组，分别存放省市县的元素民称。省级为一维数组，市为二维数组，县为三维数组。</li>\n<li>主要流程：<ol>\n<li>初始化省级菜单，把省级数组里面的元素追加到select的选项框中。</li>\n<li>当省级菜单里面元素被点击后，初始化市级菜单，追加到对应的选项框中，区级菜单同理。</li>\n<li>当省级菜单没有选项是，由于省级的selectedIndex元素的值为0，所以借此来锁定后面两级菜单，当上一级的selectedIndex为0是。不追加元素。</li>\n<li>由于采用的是追加元素的方式，所以在每次点击时，需要把下一级菜单清零（否则会越点击越多）。</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var provinces = [&quot;河北省&quot;,&quot;吉林省&quot;];</span><br><span class=\"line\">var cities = [</span><br><span class=\"line\">    [&quot;石家庄市&quot;,&quot;廊坊市&quot;],</span><br><span class=\"line\">    [&quot;长春市&quot;,&quot;吉林市&quot;]</span><br><span class=\"line\">];</span><br><span class=\"line\">var areas = [</span><br><span class=\"line\">    [</span><br><span class=\"line\">        [&quot;市中区&quot;, &quot;历下区&quot;, &quot;天桥区&quot;, &quot;槐荫区&quot;, &quot;历城区&quot;, &quot;长清区&quot;],</span><br><span class=\"line\">        [&quot;市南区&quot;, &quot;市北区&quot;, &quot;四方区&quot;, &quot;李沧区&quot;, &quot;城阳区&quot;, &quot;崂山区&quot;]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [</span><br><span class=\"line\">        [&quot;桥西区&quot;, &quot;新华区&quot;, &quot;长安区&quot;, &quot;裕华区&quot;, &quot;井陉区&quot;, &quot;藁城区&quot;, &quot;鹿泉区&quot;, &quot;栾城区&quot;],</span><br><span class=\"line\">        [&quot;安次区&quot;, &quot;广阳区&quot;, &quot;三河市&quot;, &quot;霸州市&quot;, &quot;香河县&quot;, &quot;永清县&quot;, &quot;固安县&quot;, &quot;文安县&quot;]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">];</span><br><span class=\"line\">//初始化变量</span><br><span class=\"line\">var province,city,area;</span><br><span class=\"line\">//初始化的代码</span><br><span class=\"line\">function initProvince() &#123;</span><br><span class=\"line\">//接收页面的元素</span><br><span class=\"line\">    province = document.getElementById(&quot;province&quot;);</span><br><span class=\"line\">    city = document.getElementById(&quot;city&quot;);</span><br><span class=\"line\">    area = document.getElementById(&quot;area&quot;);</span><br><span class=\"line\">    //清零操作</span><br><span class=\"line\">    province.options.length = 1;</span><br><span class=\"line\">    for (var i = 0; i &lt;provinces.length ; i++) &#123;</span><br><span class=\"line\">        var option = new Option(provinces[i],provinces[i]);</span><br><span class=\"line\">        province.options.add(option);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//当省级的选项被点击</span><br><span class=\"line\">function provinceChange() &#123;</span><br><span class=\"line\">初始化区级</span><br><span class=\"line\">    cityChange();</span><br><span class=\"line\">    city.options.length = 1;</span><br><span class=\"line\">    //当上一级没有被选择时候，直接返回，不追加元素。</span><br><span class=\"line\">    if (province.selectedIndex === 0) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //由于数组是从0开始，元素的选择数从1开始，所以减1</span><br><span class=\"line\">    var pIndex = province.selectedIndex;</span><br><span class=\"line\">    for (var i = 0; i &lt;cities[pIndex-1].length ; i++) &#123;</span><br><span class=\"line\">        var option = new Option(cities[pIndex-1][i],cities[pIndex-1][i]);</span><br><span class=\"line\">        city.options.add(option);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//当省级被点击时候解锁地区的代码</span><br><span class=\"line\">function cityChange() &#123;</span><br><span class=\"line\">    area.options.length = 1;</span><br><span class=\"line\">    if (city.selectedIndex === 0)&#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var pIndex = province.selectedIndex;</span><br><span class=\"line\">    var aIndex = city.selectedIndex;</span><br><span class=\"line\">    for (var i = 0; i &lt; areas[pIndex-1][aIndex-1].length ; i++) &#123;</span><br><span class=\"line\">        areasm = areas[pIndex-1][aIndex-1][i];</span><br><span class=\"line\">        var option = new Option(areasm,areasm);</span><br><span class=\"line\">        area.options.add(option);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\">    initProvince();</span><br><span class=\"line\">    province.onchange = provinceChange;</span><br><span class=\"line\">    city.onchange = cityChange;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["教程"],"tags":["三级联动"]},{"title":"快速排序","url":"http://yoursite.com/2019/08/29/快速排序/","content":"<h1 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h1><blockquote>\n<p>快速排序由C. A. R. Hoare在1960年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以<a href=\"https://baike.baidu.com/item/递归/1740695\" target=\"_blank\" rel=\"noopener\">递归</a>进行，以此达到整个数据变成有序<a href=\"https://baike.baidu.com/item/序列/1302588\" target=\"_blank\" rel=\"noopener\">序列</a>。</p>\n</blockquote>\n<h1 id=\"JAVA代码实现\"><a href=\"#JAVA代码实现\" class=\"headerlink\" title=\"JAVA代码实现\"></a>JAVA代码实现</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">quickSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quick</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr == <span class=\"keyword\">null</span> || arr.length &lt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        quick(arr,<span class=\"number\">0</span>,arr.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quick</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt; r)&#123;</span><br><span class=\"line\">            swap(arr,l+(<span class=\"keyword\">int</span>)(Math.random() * ( r - l + <span class=\"number\">1</span>)),r);</span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] p = partition(arr,l,r);</span><br><span class=\"line\">            quick(arr,l,p[<span class=\"number\">0</span>]-<span class=\"number\">1</span>);</span><br><span class=\"line\">            quick(arr,p[<span class=\"number\">1</span>]+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] partition(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        把数组分成三部分</span></span><br><span class=\"line\"><span class=\"comment\">        1. 把比选中的小的数字放左边</span></span><br><span class=\"line\"><span class=\"comment\">        2. 相等的放中间</span></span><br><span class=\"line\"><span class=\"comment\">        3. 比选中大的数字放右边</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> less = l-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> more = r;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt; more)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[l] &lt; arr[r])&#123;</span><br><span class=\"line\">                swap(arr,++less,l++);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[l] &gt; arr[r])&#123;</span><br><span class=\"line\">                swap(arr,--more,l);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                l++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(arr,more,r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;less+<span class=\"number\">1</span>,more&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[r];</span><br><span class=\"line\">        arr[r] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["算法学习"],"tags":["算法"]},{"title":"git环境搭建","url":"http://yoursite.com/2019/07/15/git环境搭建/","content":"<h1 id=\"windows端\"><a href=\"#windows端\" class=\"headerlink\" title=\"windows端\"></a>windows端</h1><h2 id=\"1-下载git\"><a href=\"#1-下载git\" class=\"headerlink\" title=\"1. 下载git\"></a>1. 下载git</h2><p>网址：<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/download/win</a><br>推荐使用迅雷下载，国内对于git下载较慢，迅雷能大幅度改善。复制链接在迅雷的网址输入框中输入。</p>\n<h2 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2. 安装\"></a>2. 安装</h2><p>直接一直下一步就可以</p>\n<h2 id=\"3-设置\"><a href=\"#3-设置\" class=\"headerlink\" title=\"3.设置\"></a>3.设置</h2><p>在资源管理器中打开git bash<br>输入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;Your Name&quot;</span><br><span class=\"line\">git config --global user.email &quot;email@example.com&quot;</span><br><span class=\"line\">git config --global user.password &quot;Your password&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Linux端\"><a href=\"#Linux端\" class=\"headerlink\" title=\"Linux端\"></a>Linux端</h1><p>输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n\n","categories":["教程"],"tags":["git"]},{"title":"推荐一个图床网站","url":"http://yoursite.com/2019/06/26/推荐一个图床网站/","content":"<blockquote>\n<p>由于hexo的静态网站无法上传图片，采用markdown形式使用图片，都放在项目的images里面的话，天朝对于github的加载速度堪忧，图片显示的非常慢。</p>\n</blockquote>\n<h1 id=\"SM-MS\"><a href=\"#SM-MS\" class=\"headerlink\" title=\"SM.MS\"></a>SM.MS</h1><p>地址：<a href=\"https://sm.ms/\" target=\"_blank\" rel=\"noopener\">SM.MS网站地址</a></p>\n<h1 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h1><p> <img src=\"https://i.loli.net/2019/06/26/5d1333cd9ad2015005.jpg\" alt=\"图标.jpg\"></p>\n<h1 id=\"顺便推荐一下网站图标的生产网站\"><a href=\"#顺便推荐一下网站图标的生产网站\" class=\"headerlink\" title=\"顺便推荐一下网站图标的生产网站\"></a>顺便推荐一下网站图标的生产网站</h1><p>地址：<a href=\"https://tool.lu/favicon/\" target=\"_blank\" rel=\"noopener\">图标生成网站</a></p>\n","categories":["教程"],"tags":["图床网站"]},{"title":"电脑没有F盘","url":"http://yoursite.com/2019/06/22/电脑没有F盘/","content":"<blockquote>\n<p>今天遇到了极其尴尬的事情，参加软件杯比赛，评委老师在审核时候，给我打了一个电话，说程序运行出问题了，服务器端视频无法查看，保存的视频路径有问题。</p>\n</blockquote>\n<h1 id=\"项目简介\"><a href=\"#项目简介\" class=\"headerlink\" title=\"项目简介\"></a>项目简介</h1><p>1） 系统包括视频采集端和视频服务器端。视频采集端从摄像头获取视频，根据视频画面的变化率决定视频发送到服务器的帧率。服务器接收视频，并保存视频文件到本地磁盘。视频保存格式要求与HTML5协议兼容的mp4。</p>\n<p>2） 视频采集端采用UDP协议，将视频数据发送给服务器，以适应物联网连接不安定的网络特点。带宽占用的峰值按20k/s往上，每增加10k为一档，消耗带宽越低的在带宽子分项中评分越高。</p>\n<p>3） 视频采集软件在实现视频变化检测算法时，尽可能的考虑各种干扰因素。在视频没有变化时采用固定帧率发送视频，在有异常事物闯入造成视频剧烈变化时，要尽快传输视频。</p>\n<p>4） 视频采集端建议采用树莓派开发板（树莓派3b+），摄像头采用海康网络设想头（萤石 C6C 1080P云台网络摄像机）,要求不能改变视频摄像头原始分辨率。树莓派安装ubuntu MATE 操作系统，视频采集软件在树莓派启动后自动运行。并提供接入摄像头IP的设置方法。</p>\n<p>5） 可以采用视频采集端向服务器端发图片的形式来降低带宽消耗，但服务器端要将视频重新连接成视频，同时要保证与传输视频同样好的视觉效果。</p>\n<p>6） 服务器端接收到视频后，如果能将视频通过视频发布服务器（Red5、Nginx或其他）再发布出来，可加分。</p>\n<p><a href=\"http://www.cnsoftbei.com/bencandy.php?fid=155&aid=1701\" target=\"_blank\" rel=\"noopener\">第八届软件杯基于物联网的视频系统的实现</a></p>\n<h1 id=\"问题所在\"><a href=\"#问题所在\" class=\"headerlink\" title=\"问题所在\"></a>问题所在</h1><ol>\n<li><p>编写代码时候，出于个人习惯，视频保存的路径习惯性的保存在F盘。然后评委说，他的没有F盘。我……【】。</p>\n</li>\n<li><p>其实这个路径的问题我编写的时候也有想到，我觉得可能没有路径，所以在编写时候，写了判断盘符是否存在的代码，但是没有考虑到如果主盘符不在怎么办。</p>\n</li>\n<li><p>封装时候也没有想到把视频保存的路径写到配置文件里面。</p>\n</li>\n</ol>\n<h1 id=\"教训\"><a href=\"#教训\" class=\"headerlink\" title=\"教训\"></a>教训</h1><ol>\n<li><p>以后写代码，不能理所当然的出于自己的习惯，要多考虑一下。</p>\n</li>\n<li><p>以后对于路径的问题，直接保存在项目的根目录。</p>\n</li>\n<li><p>配置文件尽量写好，考虑全面。</p>\n</li>\n</ol>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>可能这个比赛，因为这个与奖项失之交臂，bug无处不在，生活充满惊喜。不过收到了这个教训，铭记。</p>\n","categories":["遇到的各种bug"],"tags":["bug"]},{"title":"安利一个看漫画的软件","url":"http://yoursite.com/2019/06/19/安利一个看漫画的软件/","content":"<blockquote>\n<p>以前看漫画用过布卡，漫画岛，漫画之家，三个都不同程度的受限了、<br> 前段时间在贴吧偶然吃了漫画人app的安利，只要科学上网，基本什么漫画都可以看，搜索框直接搜索，ssr开启全局代理，看漫画时候不要使用Pac模式。</p>\n</blockquote>\n","categories":["教程"],"tags":["漫画"]},{"title":"漫画推荐(长期更新)","url":"http://yoursite.com/2019/06/19/漫画推荐-长期更新/","content":"<h1 id=\"长期更新\"><a href=\"#长期更新\" class=\"headerlink\" title=\"长期更新\"></a>长期更新</h1><ol>\n<li>akb49（恋爱禁止条例）【伪娘成为偶像的热血奋斗偶像漫】 地址：<a href=\"https://weibo.com/5721901695/Hzx7z4dWj\" target=\"_blank\" rel=\"noopener\">漫画推荐一</a></li>\n<li>直至死亡将我们分开 【武士盲人大叔保护小萝莉的黑帮漫】 地址：  <a href=\"https://weibo.com/5721901695/HzPVl50sV\" target=\"_blank\" rel=\"noopener\">漫画推荐二</a></li>\n<li>Monster 【天才外界医生追查杀人真相悬疑漫】 地址：<a href=\"https://weibo.com/5721901695/HBXf0ceJq\" target=\"_blank\" rel=\"noopener\">漫画推荐三</a></li>\n<li>火星异种 【未来人造变异人和火星蟑螂战斗的热血战斗慢】</li>\n<li>黑社会的超能力女儿 【黑道大哥捡到超能力女儿的搞笑日常漫】</li>\n<li>亚人 【智商男主变异不死人和对抗正派的不死人战斗的智商格斗漫】</li>\n<li>进击的巨人 【被圈养的人类反抗的热血漫】</li>\n<li>终将成为你 【百合漫】</li>\n<li>狂赌之渊 【在校园进行赌博的校园日常漫】</li>\n<li>傲娇废柴青梅竹马 【恋爱日常漫】</li>\n<li>Happy Sugar Life 【美丽变态女主和小萝莉的百合傲娇黑暗漫】</li>\n<li>见面后五秒开始战斗 【智商男主在进入真人游戏世界的战斗漫】</li>\n<li>我的青春恋爱物语果然有问题 【大老师的漫画版奇葩男主日常校园漫】</li>\n<li>怪女 【奇怪女主的青春故事略带小黄漫】</li>\n<li>东京食尸鬼 【变异废柴男主被玩弄的故事黑暗格斗漫】</li>\n<li>汤神君没有朋友 【性格古怪的男主的高中故事励志日常漫】</li>\n<li>海贼王 【独有世界观一伙人想成为海贼王的格斗热血励志漫】</li>\n<li>七原罪 【独有世界观七大罪化身的正派对抗邪恶势力的热血格斗漫】</li>\n<li>食戟之灵 【美食漫】</li>\n<li>后宫婚 【一夫多妻制试行的搞笑日常漫】</li>\n<li>我们无法一起学习 【搞笑日常后宫漫】</li>\n<li>黑执事 【男主个恶魔缔结契约黑暗风格斗漫】</li>\n<li>柯南 【厄运小学生破案日常漫】</li>\n<li>五等分的花架 【五胞胎后宫恋爱日常漫】</li>\n<li>擅长捉弄的高木同学 【高智商女主调戏男主的日常漫】</li>\n<li>东京暗鸦 【男主女主一起斩妖除魔的战斗漫】</li>\n<li>吸血鬼骑士 【逆后宫漫】</li>\n<li>古见同学有交流障碍症 【一心一意洒粮日常漫】</li>\n<li>一拳超人 【琦玉老师刷怪的搞笑热血格斗漫】</li>\n<li>恋爱禁止的世界 【系统分配结婚对象但男主喜欢女主的胃疼漫】</li>\n<li>入夜逢魔时 【奇异能力为被强奸致死的姐姐报仇的智商太监漫】</li>\n<li>如果有来生， 还愿意与我结婚吗 【老爷爷老奶奶回忆恋爱的一生的催泪治愈狗粮漫】</li>\n<li>我的英雄学院 【热血战斗校园格斗励志漫】</li>\n<li>致不灭的你 【神之子学习人生道理的格斗漫】</li>\n<li>双星之阴阳师 【斩妖除魔的男女主格斗日常漫】</li>\n<li>约定的梦幻岛 【高智商小朋友逃离恶魔养殖场的智商战斗漫】</li>\n<li>银魂 【搞笑日常银他妈】</li>\n<li>蓝色的驱魔师 【青驱励志热血格斗漫】</li>\n<li>钢之炼金术师 【独特世界观天才炼金师兄弟闯荡世界的热血格斗漫】</li>\n<li>家庭教师 【废柴男主继承黑帮老大和被诅咒的职业啥都组建家族黑帮的故事】</li>\n<li>黑猫 【矢吹老师早期的黑帮漫】</li>\n<li>反叛的鲁鲁修 【鲁鲁修漫】</li>\n<li>寄生兽 【男主被外星生物寄生但是保持清醒意识对抗被完全入侵的怪物的故事】</li>\n<li>冰菓 【高智商男主校园推理漫】</li>\n<li>JOJO的奇妙冒险 【独特世界观热血格斗漫】</li>\n<li>猎人 【独特世界观组队刷本升级的格斗热血无限拖更漫】</li>\n<li>文豪野犬 【日本文学史名人化身异能者之间的战斗智商漫】</li>\n<li>后街女孩 【变性黑帮三男主成为偶像的故事】</li>\n<li>魔笛Magi 【独特世界观魔法世界的各国之间的战斗的故事】</li>\n<li>死神 【独特世界观热血格斗漫】</li>\n<li>元气少女结缘神 【逆后宫日常漫】</li>\n<li>斩赤红之瞳 【独特世界观男主加入暗杀组织和帝国作战的热血格斗漫】</li>\n<li>野良神 【一直被供为恶神但是和女主之间的日常漫】</li>\n<li>终结的炽天使 【和吸血鬼战斗的热血格斗漫】</li>\n<li>好像告诉你 【恋爱狗粮日常漫】</li>\n<li>风夏 【完成死亡女主遗愿组乐队的日常励志偶像漫】</li>\n<li>旋风管家 【日常漫画鼻祖土豪大小姐和管家的日常恋爱漫】</li>\n<li>天降之物 【伊卡罗伊神话拟人化战斗漫】</li>\n<li>山田和七个魔女 【接吻可以解除能力的恋爱后宫校园日常漫】</li>\n<li>只有我不在的街道 【穿越回多年前拯救好友的故事】</li>\n<li>和你的第一百次恋爱 【男主不断穿越想要拯救女主一直重复的恋爱狗粮漫】</li>\n<li>极黑的布伦希尔微 【男主和变异的青梅竹马的战斗的热血漫】</li>\n<li>火影忍者 【独特世界观想成为火影的热血格斗漫】</li>\n<li>妖精的尾巴 【独特世界观工会打天下的热血格斗漫】</li>\n<li>人渣的本愿 【男主女主假装恋爱解决生理需求的日常漫】</li>\n<li>伪恋 【后宫校园日常漫】</li>\n<li>初恋怪兽 【和高富帅小学生的日常恋爱漫】</li>\n<li>电波教师 【老师教育学生帮助学生的日常校园漫】</li>\n<li>浪客剑心 【一直没看完的经典漫】</li>\n<li>犬夜叉 【同上】</li>\n<li>暗杀教室 【变异生物教育最差学生的日常校园漫】</li>\n<li>四月是你的谎言 【四月谎女主拯救男主的音乐励志催泪漫】</li>\n<li>恶魔奶爸 【男主养育魔王之子的日常漫】</li>\n<li>黑博物馆 【恶魔回忆欧洲黑暗向漫】</li>\n<li>只有神知道的世界 【后宫恋爱漫】</li>\n<li>虫师 【治愈系漫】</li>\n<li>七龙珠 【经典秒杀漫】</li>\n<li>潘朵拉之心 【独特世界观悬疑格斗漫】</li>\n<li>镖人 【国漫隋朝末年镖人故事】</li>\n<li>源君物语 【小黄漫】</li>\n<li>To Love 【史吹老师经典之作画风精细小黄漫】</li>\n<li>幻想女仆 【男主和定制的神仙女仆的日常漫】</li>\n<li>一人之下 【越看越感觉垃圾的国漫】</li>\n<li>斗罗大陆 【很国漫的国漫】</li>\n<li>天降淑娴男 【逆后宫国漫】</li>\n<li>偷星九月天 【经典国漫】</li>\n<li>咒术回战 【咒术师的日常校园格斗漫】</li>\n<li>哥布林杀手 【独特世界观牛逼男主专杀哥布林的热血团体格斗漫】</li>\n<li>东京卍会 【男主可以穿越回18年前拯救女主和朋友的黑道励志热血漫】</li>\n<li>死亡笔记 【男主捡到写名字就会死人的笔记本逃脱被抓的智商战斗漫】</li>\n<li>黑子的篮球 【励志成长运动漫】</li>\n<li>灌篮高手 【经典运动漫】</li>\n<li>美食的俘虏 【战斗美食漫】</li>\n<li>魔法少女樱 【经典战斗美少女漫】</li>\n<li>神契幻奇谭 【比较好的国漫】</li>\n<li>雏蜂 【国家研制战斗武器人格斗国漫】</li>\n<li>鬼灭之刃 【不服就打的一个热血漫】</li>\n<li>家有女友 【和白色相簿2媲美的现实类恋爱番】</li>\n<li>恋爱恐惧症 【腰斩的一个特别甜的狗粮番】</li>\n</ol>\n","categories":["兴趣爱好"],"tags":["漫画"]},{"title":"AS导入项目需要修改的文件","url":"http://yoursite.com/2019/06/16/AS导入项目需要修改的文件/","content":"<blockquote>\n<p>安卓项目导入AS经常出现问题，做一个总结，grable版本尽量不要太低也不要太高</p>\n</blockquote>\n<h1 id=\"1-项目打开目录下的build-gradle\"><a href=\"#1-项目打开目录下的build-gradle\" class=\"headerlink\" title=\"1 项目打开目录下的build.gradle\"></a>1 项目打开目录下的build.gradle</h1><p>把其中的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span><br><span class=\"line\"></span><br><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        google()</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath &apos;com.android.tools.build:gradle:3.4.1&apos;</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        // NOTE: Do not place your application dependencies here; they belong</span><br><span class=\"line\">        // in the individual module build.gradle files</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        google()</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task clean(type: Delete) &#123;</span><br><span class=\"line\">    delete rootProject.buildDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>classpath ‘ccom.android.tools.build:gradle:3.4.1’改成自己对应的AS的版本，在自己的其他项目中可以查看。</p>\n<h1 id=\"2-项目打开目录下的local-properties\"><a href=\"#2-项目打开目录下的local-properties\" class=\"headerlink\" title=\"2 项目打开目录下的local.properties\"></a>2 项目打开目录下的local.properties</h1><p>sdk的路径设置成自己的</p>\n<h1 id=\"3-gradle-wrapper-gradle-wrapper-properties-文件\"><a href=\"#3-gradle-wrapper-gradle-wrapper-properties-文件\" class=\"headerlink\" title=\"3 gradle\\wrapper\\gradle-wrapper.properties 文件\"></a>3 gradle\\wrapper\\gradle-wrapper.properties 文件</h1><p>把这个文件的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Sat Jun 15 20:27:12 CST 2019</span><br><span class=\"line\">distributionBase=GRADLE_USER_HOME</span><br><span class=\"line\">distributionPath=wrapper/dists</span><br><span class=\"line\">zipStoreBase=GRADLE_USER_HOME</span><br><span class=\"line\">zipStorePath=wrapper/dists</span><br><span class=\"line\">distributionUrl=https\\://services.gradle.org/distributions/gradle-5.1.1-all.zip</span><br></pre></td></tr></table></figure>\n\n<p>distributionUrl的gradle的版本设置为AS的内置版本，同样可以在创建过的项目中查找。</p>\n<h1 id=\"4-app-build-gradle-文件\"><a href=\"#4-app-build-gradle-文件\" class=\"headerlink\" title=\"4 app\\build.gradle 文件\"></a>4 app\\build.gradle 文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;com.android.application&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion 29</span><br><span class=\"line\">    buildToolsVersion &quot;29.0.0&quot;</span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId &quot;com.example.dell.link_game&quot;</span><br><span class=\"line\">        minSdkVersion 22</span><br><span class=\"line\">        targetSdkVersion 29</span><br><span class=\"line\">        versionCode 1</span><br><span class=\"line\">        versionName &quot;1.0&quot;</span><br><span class=\"line\">        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled false</span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</span><br><span class=\"line\">    implementation &apos;com.android.support:appcompat-v7:28.0.0&apos;</span><br><span class=\"line\">    implementation &apos;com.android.support.constraint:constraint-layout:1.1.3&apos;</span><br><span class=\"line\">    implementation &quot;com.android.support:support-v4:28.0.0&quot;</span><br><span class=\"line\">    implementation &apos;com.android.support:design:28.0.0&apos;</span><br><span class=\"line\">    testImplementation &apos;junit:junit:4.12&apos;</span><br><span class=\"line\">    androidTestImplementation &apos;com.android.support.test:runner:1.0.2&apos;</span><br><span class=\"line\">    androidTestImplementation &apos;com.android.support.test.espresso:espresso-core:3.0.2&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改compileSdkVersion 29和 buildToolsVersion “29.0.0”，修改为自己对应的版本，分别为sdk版本和buildTools的版本。</p>\n<h1 id=\"AS进行导入，As的导入功能在新建项里面。\"><a href=\"#AS进行导入，As的导入功能在新建项里面。\" class=\"headerlink\" title=\"AS进行导入，As的导入功能在新建项里面。\"></a>AS进行导入，As的导入功能在新建项里面。</h1><h1 id=\"祝成功，剩下的问题就靠AS自动解决，如果解决不了，尝试使用新版本的AS\"><a href=\"#祝成功，剩下的问题就靠AS自动解决，如果解决不了，尝试使用新版本的AS\" class=\"headerlink\" title=\"祝成功，剩下的问题就靠AS自动解决，如果解决不了，尝试使用新版本的AS\"></a>祝成功，剩下的问题就靠AS自动解决，如果解决不了，尝试使用新版本的AS</h1>","categories":["教程"],"tags":["android"]},{"title":"rime输入法使用","url":"http://yoursite.com/2019/06/13/rime输入法使用/","content":"<blockquote>\n<p>最近发现一个开源输入法，可以自己定制所有的输入法选项。支持繁体，下载尝试一下。rime输入法的五笔打字异常强大，喜欢五笔的朋友可以尝试一下。</p>\n</blockquote>\n<h1 id=\"下载地址\"><a href=\"#下载地址\" class=\"headerlink\" title=\"下载地址\"></a>下载地址</h1><p><a href=\"https://rime.im/\" target=\"_blank\" rel=\"noopener\">rime官网</a></p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>参考<a href=\"https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%B7%9E%E9%9F%BB%E8%BC%B8%E5%85%A5%E6%B3%95%E5%BC%95%E6%93%8E\" target=\"_blank\" rel=\"noopener\">维基百科</a></p>\n<p>中州韵输入法引擎（英语：Rime Input Method Engine，又称Rime 输入法）是由佛振编写的开源中文输入法，当前项目网站、源代码均托管在GitHub。基于同一个核心架构，该输入法分为三个官方发行版：Linux 发行版中州韵（ibus-rime）、Windows发行版小狼毫（Weasel）、macOS 发行版鼠须管（Squirrel）。另有数个第三方发行版：Linux 发行版fcitx-rime、Windows发行版PRIME、macOS 发行版XIME、Android发行版同文输入法（Trime）、iOS发行版iRime。</p>\n<p>中州韵可以自定义各种参数设置，备份及合并用户词典，借助在线存储服务同步用户数据。但是于其他一些主流输入法不同的是，中州韵输入法引擎没有设计图形设置界面，对其进行自定义设置时需要通过修改用户文件夹或程序文件夹里的 YAML 配置文件来达成。此外其默认了数十种输入方案</p>\n<p>当前大多数拼音输入法对繁体中文的支持不佳，甚至直接逐字转换，常会出现乱用异体字，不考虑简繁一对多的情况，但是中州韵较好地解决了此类问题。且中州韵跨平台、小巧快捷的同时又内置有多种输入方案。在非商业性的软件介绍网站“小众软件”的评选中，中州韵位列第八，成为唯一上榜的开源输入法。</p>\n<p>秉承了开源软件的传统，该输入法平台可定制性极强，且因开放源代码的特性受到注重隐私保护的用户的青睐。[10]但与此同时，该输入法平台当前尚未提供详尽的图形配置界面（仅在Windows发行版小狼毫中有简易图形配置界面），帮助文档对于用户的计算机编程水平也有一定要求，因此对于普通用户而言其配置难度较高不易上手。</p>\n<p>作者佛振表示，将继续完善API、文档和辅助工具，以便让更多开源社群的开发人员参与进来</p>\n<h1 id=\"配置使用\"><a href=\"#配置使用\" class=\"headerlink\" title=\"配置使用\"></a>配置使用</h1><p>在windows下下载后会产生九个文件，点击用户文件夹可以修改输入法的样式，在weasel.custom.yaml下修改输入法的样式，比如习惯搜狗输入法的候选字横行显示，在path下面添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customization:</span><br><span class=\"line\">  distribution_code_name: Weasel</span><br><span class=\"line\">  distribution_version: 0.13.0</span><br><span class=\"line\">  generator: &quot;Weasel::UIStyleSettings&quot;</span><br><span class=\"line\">  modified_time: &quot;Mon Jun 10 23:51:18 2019&quot;</span><br><span class=\"line\">  rime_version: 1.4.0</span><br><span class=\"line\">patch:</span><br><span class=\"line\">  style/color_scheme: appsored</span><br><span class=\"line\">  style/horizontal: true</span><br></pre></td></tr></table></figure>\n\n<p>style/color_scheme: 可以修改主题样式，查看官方文档可以自由定义。<br>我的样式在github上寻找到的。<br>下面是我的完整代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customization:</span><br><span class=\"line\">  distribution_code_name: Weasel</span><br><span class=\"line\">  distribution_version: 0.13.0</span><br><span class=\"line\">  generator: &quot;Weasel::UIStyleSettings&quot;</span><br><span class=\"line\">  modified_time: &quot;Mon Jun 10 23:51:18 2019&quot;</span><br><span class=\"line\">  rime_version: 1.4.0</span><br><span class=\"line\">patch:</span><br><span class=\"line\">  style/color_scheme: appsored</span><br><span class=\"line\">  style/horizontal: true</span><br><span class=\"line\">  style/inline_preedit: true</span><br><span class=\"line\">  style/layout/border_width: 1</span><br><span class=\"line\">  style/layout/candidate_spacing: 30</span><br><span class=\"line\">  style/layout/margin_x: 15</span><br><span class=\"line\">  style/layout/margin_y: 10</span><br><span class=\"line\">  style/layout/round_corner: 0</span><br><span class=\"line\">  style/layout/hilite_padding: 15</span><br><span class=\"line\">  style/font_point: 13</span><br><span class=\"line\"> </span><br><span class=\"line\">  </span><br><span class=\"line\">  &quot;preset_color_schemes/win10&quot;:  # 在配色方案列表裏加入標識爲 starcraft 的新方案</span><br><span class=\"line\">    author: &quot;Astrian Zheng&quot;</span><br><span class=\"line\">    back_color: 0x000000</span><br><span class=\"line\">    border_height: 6</span><br><span class=\"line\">    border_width: 6</span><br><span class=\"line\">    candidate_format: &quot;%c. %@ &quot;</span><br><span class=\"line\">    candidate_text_color: 0x2824C8</span><br><span class=\"line\">    comment_text_color: 0xFFFFFF</span><br><span class=\"line\">    corner_radius: 6</span><br><span class=\"line\">    font_point: 16</span><br><span class=\"line\">    hilited_candidate_back_color: 0x000000</span><br><span class=\"line\">    hilited_candidate_label_color: 0xFFFFFF</span><br><span class=\"line\">    hilited_candidate_text_color: 0xFFFFFF</span><br><span class=\"line\">    hilited_text_color: 0xFFFFFF</span><br><span class=\"line\">    horizontal: true</span><br><span class=\"line\">    label_color: 0x2824C8</span><br><span class=\"line\">    label_font_point: 12</span><br><span class=\"line\">    name: &quot;爱范儿黑&quot;</span><br><span class=\"line\">    text_color: 0x2824C8</span><br><span class=\"line\">    </span><br><span class=\"line\">  </span><br><span class=\"line\">  preset_color_schemes/appsored:</span><br><span class=\"line\">    author: &quot;Astrian Zheng&quot;</span><br><span class=\"line\">    back_color: 0x2824C8</span><br><span class=\"line\">    border_height: 6</span><br><span class=\"line\">    border_width: 6</span><br><span class=\"line\">    candidate_format: &quot;%c. %@ &quot;</span><br><span class=\"line\">    candidate_text_color: 0xC5C3F2</span><br><span class=\"line\">    comment_text_color: 0xFFFFFF</span><br><span class=\"line\">    corner_radius: 6</span><br><span class=\"line\">    font_point: 16</span><br><span class=\"line\">    hilited_candidate_back_color: 0x2824C8</span><br><span class=\"line\">    hilited_candidate_label_color: 0xFFFFFF</span><br><span class=\"line\">    hilited_candidate_text_color: 0xFFFFFF</span><br><span class=\"line\">    hilited_text_color: 0xFFFFFF</span><br><span class=\"line\">    horizontal: true</span><br><span class=\"line\">    label_color: 0xC5C3F2</span><br><span class=\"line\">    label_font_point: 12</span><br><span class=\"line\">    name: &quot;AppSo 红&quot;</span><br><span class=\"line\">    text_color: 0xC5C3F2</span><br></pre></td></tr></table></figure>\n\n<p>还有喜欢其他样式的windows下自带样式选择，也可以自己编写，喜欢折腾的可以尝试一下。</p>\n<h1 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h1><p>rime 支持自定义词库，后续功能我会继续研究。</p>\n","categories":["教程"],"tags":["小狼毫","rime","开源输入法"]},{"title":"2019大数据挑战赛预赛","url":"http://yoursite.com/2019/06/09/2019大数据挑战赛预赛/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from nltk.tokenize import WordPunctTokenizer</span><br><span class=\"line\">import pandas as pd</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">from sklearn.feature_extraction.text import TfidfVectorizer</span><br><span class=\"line\">from sklearn.model_selection import StratifiedKFold</span><br><span class=\"line\">from sklearn import metrics</span><br><span class=\"line\"></span><br><span class=\"line\">from sklearn.linear_model import SGDClassifier as SGD</span><br><span class=\"line\"></span><br><span class=\"line\">import warnings;warnings.filterwarnings(&apos;ignore&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">train = pd.read_csv(&quot;./data/train.csv&quot;, lineterminator=&apos;\\n&apos;, header=0)</span><br><span class=\"line\">train[&apos;label&apos;] = train[&apos;label&apos;].map(&#123;&apos;Negative&apos;:0, &apos;Positive&apos;: 1&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test = pd.read_csv(&quot;./data/20190527_test.csv&quot;, lineterminator=&apos;\\n&apos;, header=0)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">words = []</span><br><span class=\"line\">for _ in train[&apos;review&apos;].values:</span><br><span class=\"line\">    words.append(&apos; &apos;.join(WordPunctTokenizer().tokenize(_)))</span><br><span class=\"line\">train_data = words</span><br><span class=\"line\"></span><br><span class=\"line\">train_label = np.array(train[&apos;label&apos;].values, dtype=&apos;int8&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">words = []</span><br><span class=\"line\">for _ in test[&apos;review&apos;].values:</span><br><span class=\"line\">    words.append(&apos; &apos;.join(WordPunctTokenizer().tokenize(_)))</span><br><span class=\"line\">test_data = words</span><br><span class=\"line\"></span><br><span class=\"line\">ngram = 2</span><br><span class=\"line\">vectorizer = TfidfVectorizer(sublinear_tf=True, ngram_range=(1, ngram), max_df=0.9)</span><br><span class=\"line\">corpus_all = train_data + test_data</span><br><span class=\"line\">vectorizer.fit(corpus_all)</span><br><span class=\"line\">corpus_all = vectorizer.transform(corpus_all)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">lentrain = len(train_data)</span><br><span class=\"line\">train_data = corpus_all[:lentrain]</span><br><span class=\"line\">test_data = corpus_all[lentrain:]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">folds = StratifiedKFold(n_splits=30, shuffle=False, random_state=2019)</span><br><span class=\"line\">predictions = np.zeros(test_data.shape[0])</span><br><span class=\"line\"></span><br><span class=\"line\">aucs = []</span><br><span class=\"line\">for fold_, (train_index, test_index) in enumerate(folds.split(train_data, train_label)):</span><br><span class=\"line\">    print(&quot;Fold :&#123;&#125;&quot;.format(fold_ + 1))</span><br><span class=\"line\">    cv_train_data, cv_train_label= train_data[train_index], train_label[train_index]</span><br><span class=\"line\">    cv_test_data, cv_test_label = train_data[test_index], train_label[test_index]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    model = SGD(alpha=0.00001, penalty=&apos;l2&apos;, tol=10000, shuffle=True, loss=&apos;log&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    model.fit(cv_train_data, cv_train_label)</span><br><span class=\"line\">    auc = metrics.roc_auc_score(cv_test_label, model.predict_proba(cv_test_data)[:, 1])</span><br><span class=\"line\">    predictions += model.predict_proba(test_data)[:, 1] / folds.n_splits</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    aucs.append(auc)</span><br><span class=\"line\">    print(&quot;auc score: %.5f&quot; % auc)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&apos;Mean auc&apos;, np.mean(aucs))</span><br><span class=\"line\">predictions = pd.DataFrame(predictions)</span><br><span class=\"line\">id = pd.DataFrame(np.arange(1, len(predictions) + 1))</span><br><span class=\"line\">data = pd.concat([id, predictions], axis=1)</span><br><span class=\"line\">data.to_csv(&apos;./data/merge_&#123;&#125;_predictions.csv&apos;.format(np.mean(aucs)), header=[&apos;ID&apos;, &apos;Pred&apos;], index=False)</span><br></pre></td></tr></table></figure>","categories":["代码"],"tags":["python","大数据挑战赛"]},{"title":"CSDN文章爬取","url":"http://yoursite.com/2019/06/09/CSDN文章爬取/","content":"<h1 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h1><blockquote>\n<p>由于前些时间新建了个人博客，于是想把csdn的博客迁移到此处，一键迁移功能没有使用成功，所以想到了，直接爬取，然后重新发送<br> 时间：3小时<br> 预期结果：博客文章保存到本地</p>\n</blockquote>\n<h1 id=\"实施过程\"><a href=\"#实施过程\" class=\"headerlink\" title=\"实施过程\"></a>实施过程</h1><blockquote>\n<ol>\n<li>找到文章列表，进行文章爬取，提取到文章的url信息。</li>\n<li>进行文章内容的解析，提取文章内容。</li>\n<li>保存到本地。</li>\n<li>尝试对文章样式进行保存</li>\n</ol>\n</blockquote>\n<h1 id=\"使用的技术\"><a href=\"#使用的技术\" class=\"headerlink\" title=\"使用的技术\"></a>使用的技术</h1><p> 采用python语言来完成，使用pyquery库进行爬取。</p>\n<h1 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h1><ol>\n<li>分析文章页面，内容的爬取代码如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">article = doc(&apos;.blog-content-box&apos;)</span><br><span class=\"line\">#文章标题</span><br><span class=\"line\">title = article(&apos;.title-article&apos;).text()</span><br><span class=\"line\">#文章内容</span><br><span class=\"line\">content = article(&apos;.article_content&apos;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>进行文章的保存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir = &quot;F:/python-project/SpiderLearner/CSDNblogSpider/article/&quot;+title+&apos;.txt&apos;</span><br><span class=\"line\">       with open(dir, &apos;a&apos;, encoding=&apos;utf-8&apos;) as file:</span><br><span class=\"line\">           file.write(title+&apos;\\n&apos;+content.text())</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对文章的url的提取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urls = doc(&apos;.article-list .content a&apos;)</span><br><span class=\"line\">    return urls</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分页爬取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in range(3):</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\">    main(offset = i+1)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>代码整合</p>\n<h1 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"># _*_coding:utf-8 _*_</span><br><span class=\"line\">#@Time    :2019/6/8 0008 下午 11:00</span><br><span class=\"line\">#@Author  :喜欢二福的沧月君（necydcy@gmail.com）</span><br><span class=\"line\">#@FileName: CSDN.py</span><br><span class=\"line\"></span><br><span class=\"line\">#@Software: PyCharm</span><br><span class=\"line\"></span><br><span class=\"line\">import requests</span><br><span class=\"line\">from pyquery import PyQuery as pq</span><br><span class=\"line\"></span><br><span class=\"line\">def find_html_content(url):</span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">                &apos;User-Agent&apos;: &apos;Mozilla/5.0(Macintosh;Inter Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gerko) Chrome/52.0.2743.116 Safari/537.36&apos;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    html = requests.get(url,headers=headers).text</span><br><span class=\"line\">    return html</span><br><span class=\"line\">def read_and_wiriteblog(html):</span><br><span class=\"line\">    doc = pq(html)</span><br><span class=\"line\"></span><br><span class=\"line\">    article = doc(&apos;.blog-content-box&apos;)</span><br><span class=\"line\">    #文章标题</span><br><span class=\"line\">    title = article(&apos;.title-article&apos;).text()</span><br><span class=\"line\"></span><br><span class=\"line\">    content = article(&apos;.article_content&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    try:</span><br><span class=\"line\">        dir = &quot;F:/python-project/SpiderLearner/CSDNblogSpider/article/&quot;+title+&apos;.txt&apos;</span><br><span class=\"line\">        with open(dir, &apos;a&apos;, encoding=&apos;utf-8&apos;) as file:</span><br><span class=\"line\">            file.write(title+&apos;\\n&apos;+content.text())</span><br><span class=\"line\">    except Exception:</span><br><span class=\"line\">        print(&quot;保存失败&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def geturls(url):</span><br><span class=\"line\">    content = find_html_content(url)</span><br><span class=\"line\">    doc = pq(content)</span><br><span class=\"line\">    urls = doc(&apos;.article-list .content a&apos;)</span><br><span class=\"line\">    return urls</span><br><span class=\"line\"></span><br><span class=\"line\">def main(offset):</span><br><span class=\"line\">    url = &apos;https://blog.csdn.net/wait_for_taht_day5/article/category/5921557/&apos; + str(offset)</span><br><span class=\"line\">    urls = geturls(url)</span><br><span class=\"line\">    for a in urls.items():</span><br><span class=\"line\">        a_url = a.attr(&apos;href&apos;)</span><br><span class=\"line\">        print(a_url)</span><br><span class=\"line\">        html = find_html_content(a_url)</span><br><span class=\"line\">        read_and_wiriteblog(html)</span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    for i in range(3):</span><br><span class=\"line\">        print(i)</span><br><span class=\"line\">        main(offset = i+1)</span><br></pre></td></tr></table></figure></li>\n</ol>\n","categories":["技术"],"tags":["python","CSDN"]},{"title":"SSR搭建推荐网站","url":"http://yoursite.com/2019/06/07/SSR搭建推荐网站/","content":"<blockquote>\n<p>前段时间刚搭好的ss几天就炸了。所以又查了ssr的安装。<br>下面是教程推荐网站</p>\n</blockquote>\n<h1 id=\"SSR搭建和客户端下载网站\"><a href=\"#SSR搭建和客户端下载网站\" class=\"headerlink\" title=\"SSR搭建和客户端下载网站\"></a><a href=\"https://ssr.tools/82\" target=\"_blank\" rel=\"noopener\">SSR搭建和客户端下载网站</a></h1>","categories":["教程"],"tags":["SSR"]},{"title":"google chorm插件推荐","url":"http://yoursite.com/2019/06/05/google-chorm插件推荐/","content":"<blockquote>\n<p>安装谷歌浏览器，一个很大的好处就是他有很多的插件，用起来很方便。所以我推荐一些自己用起来和很方便的插件</p>\n</blockquote>\n<h1 id=\"IDM下载器\"><a href=\"#IDM下载器\" class=\"headerlink\" title=\"IDM下载器\"></a>IDM下载器</h1><blockquote>\n<p>一款下载器可以下载网络上的除了bt，磁力以外的任何链接，可以下载睿站视频和百度云直连视频。</p>\n</blockquote>\n<p>下载地址</p>\n<h1 id=\"油猴\"><a href=\"#油猴\" class=\"headerlink\" title=\"油猴\"></a>油猴</h1><blockquote>\n<p>插件管理器</p>\n</blockquote>\n<h1 id=\"Adblock-block\"><a href=\"#Adblock-block\" class=\"headerlink\" title=\"Adblock block\"></a>Adblock block</h1><blockquote>\n<p>广告屏蔽软件</p>\n</blockquote>\n<h1 id=\"印象笔记插件\"><a href=\"#印象笔记插件\" class=\"headerlink\" title=\"印象笔记插件\"></a>印象笔记插件</h1>","categories":["教程"],"tags":["chorm"]},{"title":"把hexo博客部署到自己的云服务器","url":"http://yoursite.com/2019/06/03/把hexo博客部署到自己的云服务器/","content":"<p>上一次把hexo部署到自己的github账号上，但由于github访问比较慢，自己有服务器，所以此次把博客部署到自己的云服务器上。<br>个人建议要是自己的博客的话，直接root用户登陆就可以了。如果有其他用涂，用新创建的用户进行操作。此次采用root用户进行安装。</p>\n<blockquote>\n<p>vim使用方法，按i开始编辑，编辑结束按esc，:wq退出。</p>\n</blockquote>\n<h1 id=\"1-安装git、nginx\"><a href=\"#1-安装git、nginx\" class=\"headerlink\" title=\"1 安装git、nginx\"></a>1 安装git、nginx</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install git nginx -y</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-创建git仓库\"><a href=\"#2-创建git仓库\" class=\"headerlink\" title=\"2 创建git仓库\"></a>2 创建git仓库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /var/repo/</span><br><span class=\"line\">cd /var/repo/</span><br><span class=\"line\">git init --bare myblog.git</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-配置Nginx托管文件目录\"><a href=\"#3-配置Nginx托管文件目录\" class=\"headerlink\" title=\"3 配置Nginx托管文件目录\"></a>3 配置Nginx托管文件目录</h1><p>创建/var/www/myblog目录，用于Nginx托管。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /var/www/myblog</span><br></pre></td></tr></table></figure>\n\n<p>修改Nginx的default设置，使root指向hexo目录.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n\n<p>修改root指向的地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen 80 default_server;</span><br><span class=\"line\">listen [::]:80 default_server ipv6only=on;</span><br><span class=\"line\"></span><br><span class=\"line\">root /var/www/hexo;(此处做修改，其他地方不动)</span><br></pre></td></tr></table></figure>\n\n<p>重启Nginx服务，使得改动生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx restart</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-创建git-hooks\"><a href=\"#3-创建git-hooks\" class=\"headerlink\" title=\"3 创建git hooks\"></a>3 创建<a href=\"https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90\" target=\"_blank\" rel=\"noopener\">git hooks</a></h1><p>在自动生成的 hooks 目录下创建一个新的钩子文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /var/repo/myblog.git/hooks/post-receive</span><br></pre></td></tr></table></figure>\n\n<p>在该文件中添加一行代码，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --work-tree=/var/www/mybolg --git-dir=/var/repo/myblog.git checkout -f</span><br></pre></td></tr></table></figure>\n\n<p>保存并退出文件，并让该文件变为可执行文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /var/repo/myblog.git/hooks/post-receive</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-配置本地文件\"><a href=\"#4-配置本地文件\" class=\"headerlink\" title=\"4 配置本地文件\"></a>4 配置本地文件</h1><p>修改hexo根目录下的_config.yml 文件，把url改成自己的服务器ip或者绑定的域名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url: http://server-ip # 改成IP地址或这域名</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-通过Git部署\"><a href=\"#5-通过Git部署\" class=\"headerlink\" title=\"5 通过Git部署\"></a>5 通过Git部署</h1><p>先在任意位置处打开git bash从服务器上把myblog.git仓库克隆下来, 以此来将服务器地址添加到受信任的站点中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone root@server_ip:/var/repo/myblog.git</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>第一次进行这一步时会提示是否继续，选yes即可。</p>\n</blockquote>\n<h1 id=\"6-编辑hexo的-config-yml文件，最下方，把之前的git地址换成自己的服务器的，修改为\"><a href=\"#6-编辑hexo的-config-yml文件，最下方，把之前的git地址换成自己的服务器的，修改为\" class=\"headerlink\" title=\"6 编辑hexo的_config.yml文件，最下方，把之前的git地址换成自己的服务器的，修改为\"></a>6 编辑hexo的_config.yml文件，最下方，把之前的git地址换成自己的服务器的，修改为</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: root@server_ip:/var/repo/myblog.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"部署完成\"><a href=\"#部署完成\" class=\"headerlink\" title=\"部署完成\"></a>部署完成</h1><p>在浏览器输入自己的地址就可以看到自己的博客了。</p>\n","categories":["教程"],"tags":["hexo","服务器"]},{"title":"Shadowsocks搭建教程(科学上网)","url":"http://yoursite.com/2019/06/03/Shadowsocks搭建教程-科学上网/","content":"<h1 id=\"搭建自己的ssr服务器\"><a href=\"#搭建自己的ssr服务器\" class=\"headerlink\" title=\"搭建自己的ssr服务器\"></a>搭建自己的ssr服务器</h1><h2 id=\"1-拥有一台自己的服务器\"><a href=\"#1-拥有一台自己的服务器\" class=\"headerlink\" title=\"1. 拥有一台自己的服务器\"></a>1. 拥有一台自己的服务器</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/miria-486/p/10687744.html\" target=\"_blank\" rel=\"noopener\">可以参考我的文章</a><br>  也可以买<a href=\"https://www.qcgzxw.com/2293.html\" target=\"_blank\" rel=\"noopener\">vultr</a><br>  这两个都是月付，有时候ip被qiang了只能换了。</p>\n</blockquote>\n<h2 id=\"2-下载SSR客户端（Python3-pip方法）\"><a href=\"#2-下载SSR客户端（Python3-pip方法）\" class=\"headerlink\" title=\"2.下载SSR客户端（Python3 pip方法）\"></a>2.下载SSR客户端（Python3 pip方法）</h2><blockquote>\n<p>参考的教程是使用python3进行下载和搭建，相比于直接ssr我感觉更方便一些。</p>\n</blockquote>\n<p>（1）安装pip3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt install python3-pip</span><br></pre></td></tr></table></figure>\n\n<p>（2）安装Shadowsocks</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install https://github.com/shadowsocks/shadowsocks/archive/master.zip</span><br></pre></td></tr></table></figure>\n\n<p>(3)创建Shadowsocks配置文件所在文件夹：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /etc/shadowsocks</span><br></pre></td></tr></table></figure>\n\n<p>(4)创建配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>下面的password改成自己设置的密码，以后改端口号也是在这个文件下更改，建议使用小一点的server_port,校园网连接的话，会ban了大端口（校园网不能打游戏一个道理）</p>\n</blockquote>\n<p>在文件中加入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;::&quot;,</span><br><span class=\"line\">    &quot;server_port&quot;:2333,</span><br><span class=\"line\">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;password&quot;:&quot;你自己的密码&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;:300,</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class=\"line\">    &quot;fast_open&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（5）测试Shadowsocks配置<br>首先记录下服务器的IP地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n\n<p>找到IPv4地址（和IPv6地址），如我的ifconfig输出为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 134.209.196.117  netmask 255.255.240.0  broadcast 134.209.207.255</span><br><span class=\"line\">        inet6 2a03:b0c0:2:f0::139:3001  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class=\"line\">        inet6 fe80::b8ee:f0ff:fe10:fcce  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class=\"line\">        ether ba:ee:f0:10:fc:ce  txqueuelen 1000  (Ethernet)</span><br><span class=\"line\">        RX packets 38661  bytes 22271799 (22.2 MB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 37329  bytes 22347643 (22.3 MB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class=\"line\">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class=\"line\">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class=\"line\">        RX packets 851  bytes 78860 (78.8 KB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 851  bytes 78860 (78.8 KB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>所以我的IPv4地址是134.209.196.117，IPv6地址是2a03:b0c0:2:f0::139:3001。</p>\n</blockquote>\n<p>(5.1)然后来测试下Shadowsocks能不能正常工作了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在Shadowsocks客户端添加服务器(下载地址在下面)，<br>地址填写你的IPv4地址或IPv6地址<br>端口号为2333<br>加密方法为aes-256-cfb<br>密码为你设置的密码。<br>然后设置客户端使用全局模式<br>浏览器登录Google试试应该能直接打开了。</p>\n</blockquote>\n<h2 id=\"测试完毕，按Ctrl-C关闭Shadowsocks。\"><a href=\"#测试完毕，按Ctrl-C关闭Shadowsocks。\" class=\"headerlink\" title=\"测试完毕，按Ctrl + C关闭Shadowsocks。\"></a>测试完毕，按Ctrl + C关闭Shadowsocks。</h2><p>(6)新建Shadowsocks管理文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/systemd/system/shadowsocks-server.service</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>加入以下代码</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Shadowsocks Server</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks/config.json</span><br><span class=\"line\">Restart=on-abort</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">Ctrl + O保存文件，Ctrl + X退出。</span><br></pre></td></tr></table></figure>\n\n<p>(7)启动Shadowsocks：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start shadowsocks-server</span><br></pre></td></tr></table></figure>\n\n<p>(8)设置开机启动Shadowsocks：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable shadowsocks-server</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"客户端ssr下载地址\"><a href=\"#客户端ssr下载地址\" class=\"headerlink\" title=\"客户端ssr下载地址\"></a>客户端ssr下载地址</h1><h2 id=\"pc端\"><a href=\"#pc端\" class=\"headerlink\" title=\"pc端\"></a><a href=\"https://github.com/shadowsocks/shadowsocks/tree/master\" target=\"_blank\" rel=\"noopener\">pc端</a></h2><h2 id=\"android端\"><a href=\"#android端\" class=\"headerlink\" title=\"android端\"></a><a href=\"https://github.com/shadowsocks/shadowsocks-android\" target=\"_blank\" rel=\"noopener\">android端</a></h2><h2 id=\"ipad端，寻找一个外国的账号，直接在appstore下载。\"><a href=\"#ipad端，寻找一个外国的账号，直接在appstore下载。\" class=\"headerlink\" title=\"ipad端，寻找一个外国的账号，直接在appstore下载。\"></a>ipad端，寻找一个外国的账号，直接在appstore下载。</h2><h1 id=\"科学上网成功\"><a href=\"#科学上网成功\" class=\"headerlink\" title=\"科学上网成功\"></a>科学上网成功</h1><blockquote>\n<p>参考<a href=\"https://www.polarxiong.com/archives/Ubuntu-16-04%E4%B8%8BShadowsocks%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BC%98%E5%8C%96.html\" target=\"_blank\" rel=\"noopener\">Ubuntu 16.04下Shadowsocks服务器端安装及优化</a></p>\n</blockquote>\n","categories":["教程"],"tags":["SS","科学上网"]},{"title":"ERROR: Could not find a version that satisfies the requirement tensortfows (from versions: none) ERROR: No matching distribution found for tensortfows","url":"http://yoursite.com/2019/06/02/ERROR-Could-not-find-a-version-that-satisfies-the-requirement-tensortfows-from-versions-none-ERROR-No-matching-distribution-found-for-tensortfows/","content":"<p>1.首先tensortfows是仅支持64位的python环境，所以现在控制台输入python，看一下版本 [python3.6,64位下载]（<a href=\"https://www.python.org/ftp/python/3.6.0/python-3.6.0-amd64.exe）\" target=\"_blank\" rel=\"noopener\">https://www.python.org/ftp/python/3.6.0/python-3.6.0-amd64.exe）</a><br>2.第二，网上说不支持python3.7版本的。（我一直用的3.7）。改用低版本python就可以。<br>3.建议使用anaconda来继承深度学习的环境</p>\n","categories":["遇到的各种bug"],"tags":["android"]},{"title":"夜神模拟器127.0.0.1:62001: 由于目标 计算机积极拒绝，无法连接 解决方法","url":"http://yoursite.com/2019/05/31/夜神模拟器127-0-0-1-62001-由于目标-计算机积极拒绝，无法连接-解决方法/","content":"<ol>\n<li>进入进Android SDK下的platform-tools目录</li>\n<li>将adb.exe拷贝至夜神bin目录下，粘贴两个，一个改成nox_adb.exe，把原来的nox_adb.exe删掉。</li>\n<li>cmd里面nox_adb connect 127.0.0.1:62001</li>\n<li>如果62001端口用不.了就换一个。</li>\n</ol>\n","categories":["遇到的各种bug"],"tags":["android"]},{"title":"leetcode17","url":"http://yoursite.com/2019/05/31/leetcode17/","content":"<p>转载请注明出处<br>Letter Combinations of a Phone Number</p>\n<p>Given a digit string, return all possible letter combinations that the number could represent.</p>\n<p>A mapping of digit to letters (just like on the telephone buttons) is given below.</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190319150322629.png\" alt=\"在这里插入图片描述\"><br>Input:Digit string “23”<br>Output: [“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].<br>Note:<br>Although the above answer is in lexicographical order, your answer could be in any order you want.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func letterCombinations(digits string) []string &#123;</span><br><span class=\"line\">    if (len(digits)) == 0 &#123;</span><br><span class=\"line\">        return nil</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    AllDigits := map[byte][]string&#123;</span><br><span class=\"line\">        &apos;0&apos;: &#123;&quot; &quot;&#125;,</span><br><span class=\"line\">        &apos;1&apos;: &#123;&quot;&quot;&#125;,</span><br><span class=\"line\">        &apos;2&apos;: &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;,</span><br><span class=\"line\">        &apos;3&apos;: &#123;&quot;d&quot;, &quot;e&quot;, &quot;f&quot;&#125;,</span><br><span class=\"line\">        &apos;4&apos;: &#123;&quot;g&quot;, &quot;h&quot;, &quot;i&quot;&#125;,</span><br><span class=\"line\">        &apos;5&apos;: &#123;&quot;j&quot;, &quot;k&quot;, &quot;l&quot;&#125;,</span><br><span class=\"line\">        &apos;6&apos;: &#123;&quot;m&quot;, &quot;n&quot;, &quot;o&quot;&#125;,</span><br><span class=\"line\">        &apos;7&apos;: &#123;&quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;&#125;,</span><br><span class=\"line\">        &apos;8&apos;: &#123;&quot;t&quot;, &quot;u&quot;, &quot;v&quot;&#125;,</span><br><span class=\"line\">        &apos;9&apos;: &#123;&quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var cur string</span><br><span class=\"line\">    answer := make([]string, 0)</span><br><span class=\"line\">    dfs(digits, AllDigits, 0, cur, &amp;answer)</span><br><span class=\"line\">    fmt.Println(answer)</span><br><span class=\"line\">    return answer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func dfs(digits string, AllDigits map[byte][]string, l int, cur string, answer *[]string) &#123;</span><br><span class=\"line\">    if l == len(digits) &#123;</span><br><span class=\"line\">        *answer = append(*answer, cur)</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for _, n := range AllDigits[byte(digits[l])] &#123;</span><br><span class=\"line\">        cur = cur + n</span><br><span class=\"line\">        dfs(digits, AllDigits, l+1, cur, answer)</span><br><span class=\"line\">        cur = cur[:int(len(cur)-1)]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["算法;golang"]},{"title":"算法学习--最大子数组和（分治法）","url":"http://yoursite.com/2019/05/31/算法学习-最大子数组和（分治法）/","content":"<h1 id=\"最大子数组\"><a href=\"#最大子数组\" class=\"headerlink\" title=\"最大子数组\"></a>最大子数组</h1><hr>\n<h2 id=\"算法描述：\"><a href=\"#算法描述：\" class=\"headerlink\" title=\"算法描述：\"></a>算法描述：</h2><blockquote>\n<p>1 找到数组中间位置mid，分成两个数组[low,mid],[mid,high]<br>   2 最大子数组即为，[low,mid],[mid,high]和跨越mid的数组，3种情况之中的最大者。<br>   3 [low,mid],[mid,high]可以使用递归算法求解<br>   4 跨越中间点的情况，从中间点分别向左右遍历，寻找最大的包含中间点的最大子数组。将两者相加<br>   5 比较[low,mid],[mid,high]和跨越mid的数组重的最大者即为所求</p>\n</blockquote>\n<hr>\n<h2 id=\"时间复杂度：\"><a href=\"#时间复杂度：\" class=\"headerlink\" title=\"时间复杂度：\"></a>时间复杂度：</h2><blockquote>\n<p>最大子段和即为这三个区间的最大子段和的最大值。因此原问题可化为两个求解规模为 n/2 的子问题，和求解一个跨越中点的序列的最大子段和问题。其中第三种情况可分别求解序列 a1,…,amida1,…,amid 和 amid+1,…,anamid+1,…,an 的最大子序列，然后将两者合并即可，因此该部分的时间复杂度为 Θ(n)。算法的时间复杂度可用递归的形式表示为：<br>T(n)={Θ(1),n=12T(n/2)+Θ(n),n&gt;1<br>T(n)={Θ(1),n=12T(n/2)+Θ(n),n&gt;1<br>可得，算法的复杂度为T(n)=Θ(nlgn)T(n)=Θ(nlgn)。</p>\n</blockquote>\n<hr>\n<h1 id=\"java-实现\"><a href=\"#java-实现\" class=\"headerlink\" title=\"java 实现\"></a>java 实现</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import static java.lang.Float.POSITIVE_INFINITY;</span><br><span class=\"line\">/*</span><br><span class=\"line\">@Time    :2019/5/18 0018 下午 7:11</span><br><span class=\"line\">@Author  :喜欢二福的沧月君（necydcy@gmail.com）</span><br><span class=\"line\">@FileName: MaxCrossing.java</span><br><span class=\"line\">@Software: IntelliJ IDEA</span><br><span class=\"line\">*/</span><br><span class=\"line\">public class MaxCrossing &#123;</span><br><span class=\"line\">    /*</span><br><span class=\"line\">    * 最大子数组:</span><br><span class=\"line\">    * 分治法求解</span><br><span class=\"line\">    * 1 找到数组中间位置mid，分成两个数组[low,mid],[mid,high]</span><br><span class=\"line\">    * 2 最大子数组即为，[low,mid],[mid,high]和跨越mid的数组，3种情况之中的最大者。</span><br><span class=\"line\">    * 3 [low,mid],[mid,high]可以使用递归算法求解</span><br><span class=\"line\">    * 4 跨越中间点的情况，从中间点分别向左右遍历，寻找最大的包含中间点的最大子数组。将两者相加</span><br><span class=\"line\">    * 5 比较[low,mid],[mid,high]和跨越mid的数组重的最大者即为所求</span><br><span class=\"line\">    * */</span><br><span class=\"line\">    public static void main(String[] args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //测试函数</span><br><span class=\"line\">        int[] array = &#123; 9,10,8,12,6,10,12,11,9,1 &#125;;</span><br><span class=\"line\">        int[] arr = new int[array.length-1];</span><br><span class=\"line\">        for (int i = 0; i &lt;array.length-1 ; i++) &#123;</span><br><span class=\"line\">            arr[i] = array[i+1]-array[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int[] result =FindMaxImumSubarray(arr, 0, arr.length - 1);</span><br><span class=\"line\">        for (int value : result) &#123;</span><br><span class=\"line\">            System.out.println(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;最大子字符串和：&quot;+(array[result[0]]+array[result[1]]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static int[] FindMaxImumSubarray(int[] A, int low, int high) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (high == low)&#123;</span><br><span class=\"line\">            return new int[]&#123;low,high,A[low]&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            int mid = (low+high)/2;</span><br><span class=\"line\">            int[] lefts = new int[3];</span><br><span class=\"line\">            int[] mids = new int[3];</span><br><span class=\"line\">            int[] rights = new int[3];</span><br><span class=\"line\">            lefts = FindMaxImumSubarray(A,low,mid);</span><br><span class=\"line\">            rights = FindMaxImumSubarray(A,mid+1,high);</span><br><span class=\"line\">            mids = FindMaxCrossingSubarray(A,low,mid,high);</span><br><span class=\"line\">            assert rights != null;</span><br><span class=\"line\">            assert lefts != null;</span><br><span class=\"line\">            if (lefts[2]&gt;rights[2]&amp;&amp;lefts[2]&gt;mids[2])&#123;</span><br><span class=\"line\">                return lefts;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else if (rights[2]&gt;lefts[2]&amp;&amp;rights[2]&gt;mids[2])&#123;</span><br><span class=\"line\">                return rights;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else return mids;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static int[] FindMaxCrossingSubarray(int[] A, int low, int mid, int high) &#123;</span><br><span class=\"line\">        int leftSum = (int) -POSITIVE_INFINITY;</span><br><span class=\"line\">        int sum = 0;</span><br><span class=\"line\">        int maxLeft = 0;</span><br><span class=\"line\">        for (int i = mid; i &gt;=low ; i--) &#123;</span><br><span class=\"line\">            sum += A[i];</span><br><span class=\"line\">            if (sum&gt;leftSum)&#123;</span><br><span class=\"line\">                leftSum = sum;</span><br><span class=\"line\">                maxLeft = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int rightSum = (int) -POSITIVE_INFINITY;</span><br><span class=\"line\">        sum = 0;</span><br><span class=\"line\">        int maxRight = 0;</span><br><span class=\"line\">        for (int j = mid+1; j &lt;=high ; j++) &#123;</span><br><span class=\"line\">            sum += A[j];</span><br><span class=\"line\">            if (sum&gt;rightSum)&#123;</span><br><span class=\"line\">                rightSum = sum;</span><br><span class=\"line\">                maxRight = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return new int[]&#123;maxLeft,maxRight,leftSum+rightSum&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["算法学习"],"tags":["算法"]},{"title":"算法学习--归并排序（分治法）","url":"http://yoursite.com/2019/05/31/算法学习-归并排序（分治法）/","content":"<h1 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h1><hr>\n<h3 id=\"分治法\"><a href=\"#分治法\" class=\"headerlink\" title=\"分治法\"></a>分治法</h3><blockquote>\n<p>分治法可以通俗的解释为：把一片领土分解，分解为若干块小部分，然后一块块地占领征服，被分解的可以是不同的政治派别或是其他什么，然后让他们彼此异化。<br>分治法的精髓：<br>分–将问题分解为规模更小的子问题；<br>治–将这些规模更小的子问题逐个击破；<br>合–将已解决的子问题合并，最终得出“母”问题的解；<a href=\"https://baike.baidu.com/item/%E5%88%86%E6%B2%BB%E6%B3%95/2407337\" target=\"_blank\" rel=\"noopener\">百度百科</a></p>\n</blockquote>\n<hr>\n<hr>\n<h3 id=\"归并排序的复杂度\"><a href=\"#归并排序的复杂度\" class=\"headerlink\" title=\"归并排序的复杂度\"></a>归并排序的复杂度</h3><blockquote>\n<p>归并排序是一种稳定的排序算法，归并排序的主要问题在于它需要一个与待排序数组一样大的辅助数组空间。由于归并排序每次划分时两个子序列的长度基本一样，所以归并排序最好、最差和平均时间复杂度都是nlog2n。</p>\n</blockquote>\n<hr>\n<h3 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h3><blockquote>\n<p>归并操作的工作原理如下：<br>第一步：申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列<br>第二步：设定两个指针，最初位置分别为两个已经排序序列的起始位置<br>第三步：比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置<br>重复步骤3直到某一指针超出序列尾<br>将另一序列剩下的所有元素直接复制到合并序列尾</p>\n</blockquote>\n<hr>\n<h1 id=\"java实现\"><a href=\"#java实现\" class=\"headerlink\" title=\"java实现\"></a>java实现</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import static java.lang.Float.POSITIVE_INFINITY;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MergeSort&#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int arr[]=&#123;1,5,6,8,7,4,3,9&#125;;</span><br><span class=\"line\">        MergeSort_Manger(arr,0,arr.length-1);</span><br><span class=\"line\">        for (int e:arr)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            System.out.print(e+&quot;\\t&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void MergeSort_Manger(int[] arr, int begin, int end) &#123;</span><br><span class=\"line\">        if(begin&lt;end)&#123;</span><br><span class=\"line\">            int mid=(begin+end)/2;</span><br><span class=\"line\">            MergeSort_Manger(arr,begin,mid);//对左段进行排序</span><br><span class=\"line\">            MergeSort_Manger(arr,mid+1,end);//对右段进行排序</span><br><span class=\"line\">            MergeSort(arr,begin,mid,end);//合并</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static void MergeSort(int[] arr, int begin, int mid, int end) &#123;</span><br><span class=\"line\">        /*</span><br><span class=\"line\">        * 1.设置两个临时的数组，分别存放数组的前半段和后半段</span><br><span class=\"line\">        * 2.把两个数组的最后一位赋值为无穷大</span><br><span class=\"line\">        * 3.比较两个数组，把相对较小的值（最小值）插入到原数组的begin位</span><br><span class=\"line\">        * */</span><br><span class=\"line\">        int n1=mid-begin+1;</span><br><span class=\"line\">        int n2=end-mid;</span><br><span class=\"line\">        int[] L= new int [n1+1];</span><br><span class=\"line\">        int[] R= new int [n2+1];</span><br><span class=\"line\">        L[n1]=(int)POSITIVE_INFINITY;//正无穷大</span><br><span class=\"line\">        R[n2]=(int)POSITIVE_INFINITY;</span><br><span class=\"line\">        for (int i = 0; i &lt;n1; i++) &#123;</span><br><span class=\"line\">            L[i]=arr[begin+i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i = 0; i &lt;n2; i++) &#123;</span><br><span class=\"line\">            R[i]=arr[mid+i+1];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int k=0,i=0,j=0;</span><br><span class=\"line\">        for ( k=begin;k&lt;=end;k++)&#123;</span><br><span class=\"line\">            if (R[i]&lt;L[j])&#123;</span><br><span class=\"line\">                arr[k]=R[i++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else</span><br><span class=\"line\">                 arr[k]=L[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["算法学习"],"tags":["算法"]},{"title":"算法学习--插入排序","url":"http://yoursite.com/2019/05/31/算法学习-插入排序/","content":"<h1 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h1><blockquote>\n<p>–对于少量排序，他是一个有效的算法。有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，这个时候就要用到一种新的排序方法——插入排序法,插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)。是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。<br>插入排序的基本思想是：每步将一个待排序的记录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。<br><a href=\"https://baike.baidu.com/item/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/7214992?fr=aladdin\" target=\"_blank\" rel=\"noopener\">百度百科</a></p>\n</blockquote>\n<hr>\n<h2 id=\"java代码实现：\"><a href=\"#java代码实现：\" class=\"headerlink\" title=\"java代码实现：\"></a>java代码实现：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Cpaixu &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[]args)&#123;</span><br><span class=\"line\">        int arr[]=&#123;2,5,7,52,3,6&#125;;</span><br><span class=\"line\">        for (int i=1;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">            int key=arr[i];</span><br><span class=\"line\">            int j=i-1;</span><br><span class=\"line\">            while(j&gt;=0&amp;&amp;arr[j]&lt;key)&#123;</span><br><span class=\"line\">                arr[i+1]=arr[i];</span><br><span class=\"line\">                j=j-1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j+1]=key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">        System.out.println(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["算法学习"],"tags":["算法"]},{"title":"算法学习--序言","url":"http://yoursite.com/2019/05/31/算法学习-序言/","content":"<h3 id=\"算法学习是个需要长期坚持的活动，开一个坑，希望自己慢慢进步。\"><a href=\"#算法学习是个需要长期坚持的活动，开一个坑，希望自己慢慢进步。\" class=\"headerlink\" title=\"算法学习是个需要长期坚持的活动，开一个坑，希望自己慢慢进步。\"></a>算法学习是个需要长期坚持的活动，开一个坑，希望自己慢慢进步。</h3><blockquote>\n<p>工欲善其事，必先利利器。</p>\n</blockquote>\n<h4 id=\"算法学习的葵花宝典\"><a href=\"#算法学习的葵花宝典\" class=\"headerlink\" title=\"算法学习的葵花宝典\"></a>算法学习的葵花宝典</h4><p>Introduction to Algorithms<br>Clrs3.jpeg<br>Cover of the third edition<br>Author    Thomas H. Cormen<br>Charles E. Leiserson<br>Ronald L. Rivest<br>Clifford Stein<br>Country     United States<br>Language    English<br>Subject    Computer algorithms<br>Publisher    MIT Press<br>Publication date<br>1990 (first edition)<br>Pages    1312<br>ISBN    978-0-262-03384-8<br>Introduction to Algorithms is a book by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. The book has been widely used as the textbook for algorithms courses at many universities[1] and is commonly cited as a reference for algorithms in published papers, with over 10,000 citations documented on CiteSeerX.[2] The book sold half a million copies during its first 20 years.[3] Its fame has led to the common use of the abbreviation “CLRS” (Cormen, Leiserson, Rivest, Stein), or, in the first edition, “CLR” (Cormen, Leiserson, Rivest).[4]</p>\n<p>In the preface, the authors write about how the book was written to be comprehensive and useful in both teaching and professional environments. Each chapter focuses on an algorithm, and discusses its design techniques and areas of application. Instead of using a specific programming language, the algorithms are written in pseudocode. The descriptions focus on the aspects of the algorithm itself, its mathematical properties, and emphasize efficiency.[5]</p>\n<hr>\n<p>链接：<a href=\"https://pan.baidu.com/s/16hn7KHN1bxL8IAGLjGBexg\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/16hn7KHN1bxL8IAGLjGBexg</a> </p>\n<p>提取码：cnan （请于24小时内删除，仅供分享）</p>\n","categories":["算法学习"],"tags":["算法"]},{"title":"hexo博客搭建","url":"http://yoursite.com/2019/05/30/hexo博客搭建/","content":"<h1 id=\"搭建hexo博客\"><a href=\"#搭建hexo博客\" class=\"headerlink\" title=\"搭建hexo博客\"></a>搭建hexo博客</h1><blockquote>\n<p>在ubuntu下安装，本人建议使用linux或者max。</p>\n</blockquote>\n<h1 id=\"一-安装hexo博客框架\"><a href=\"#一-安装hexo博客框架\" class=\"headerlink\" title=\"一 安装hexo博客框架\"></a>一 安装hexo博客框架</h1><h2 id=\"1-安装node-js\"><a href=\"#1-安装node-js\" class=\"headerlink\" title=\"1.安装node.js\"></a>1.安装node.js</h2><ul>\n<li><h3 id=\"更新软件源\"><a href=\"#更新软件源\" class=\"headerlink\" title=\"更新软件源\"></a>更新软件源</h3></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install -y python-software-properties software-properties-common</span><br><span class=\"line\">sudo add-apt-repository ppa:chris-lea/node.js</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nodejs</span><br><span class=\"line\">sudo apt install nodejs-legacy</span><br><span class=\"line\">sudo apt install npm</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"更新npm的包镜像源，方便快速下载\"><a href=\"#更新npm的包镜像源，方便快速下载\" class=\"headerlink\" title=\"更新npm的包镜像源，方便快速下载\"></a>更新npm的包镜像源，方便快速下载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm config set registry https://registry.npm.taobao.org</span><br><span class=\"line\">sudo npm config list</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"全局安装n管理器-用于管理nodejs版本\"><a href=\"#全局安装n管理器-用于管理nodejs版本\" class=\"headerlink\" title=\"全局安装n管理器(用于管理nodejs版本)\"></a>全局安装n管理器(用于管理nodejs版本)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install n -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"安装最新的nodejs（stable版本）\"><a href=\"#安装最新的nodejs（stable版本）\" class=\"headerlink\" title=\"安装最新的nodejs（stable版本）\"></a>安装最新的nodejs（stable版本）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo n stable</span><br><span class=\"line\">sudo node -v</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"2-安装hexo\"><a href=\"#2-安装hexo\" class=\"headerlink\" title=\"2.安装hexo\"></a>2.安装hexo</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-创建hexo博客\"><a href=\"#3-创建hexo博客\" class=\"headerlink\" title=\"3.创建hexo博客\"></a>3.创建hexo博客</h2><ul>\n<li><h3 id=\"建立一个空的文件夹（如blog）\"><a href=\"#建立一个空的文件夹（如blog）\" class=\"headerlink\" title=\"建立一个空的文件夹（如blog）\"></a>建立一个空的文件夹（如blog）</h3></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir blog</span><br><span class=\"line\">cd blog/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"生成hexo博客结构\"><a href=\"#生成hexo博客结构\" class=\"headerlink\" title=\"生成hexo博客结构\"></a>生成hexo博客结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"尝试一下启动自己的博客\"><a href=\"#尝试一下启动自己的博客\" class=\"headerlink\" title=\"尝试一下启动自己的博客\"></a>尝试一下启动自己的博客</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"编写一个新的博客\"><a href=\"#编写一个新的博客\" class=\"headerlink\" title=\"编写一个新的博客\"></a>编写一个新的博客</h3></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n &quot;我的第一篇博客&quot;</span><br><span class=\"line\">cd source/_posts/</span><br><span class=\"line\">vim &quot;我的第一篇博客&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>博客采用markdown格式，自己写就可以 了。</p>\n<ul>\n<li><h3 id=\"到此为止，hexo博客便安装成功。\"><a href=\"#到此为止，hexo博客便安装成功。\" class=\"headerlink\" title=\"到此为止，hexo博客便安装成功。\"></a>到此为止，hexo博客便安装成功。</h3></li>\n</ul>\n</blockquote>\n<h1 id=\"二-部署到github\"><a href=\"#二-部署到github\" class=\"headerlink\" title=\"二 部署到github\"></a>二 部署到github</h1><h2 id=\"1-在github新建一个io仓库\"><a href=\"#1-在github新建一个io仓库\" class=\"headerlink\" title=\"1. 在github新建一个io仓库\"></a>1. 在github新建一个io仓库</h2><blockquote>\n<p><a href=\"https://jingyan.baidu.com/article/acf728fd64b5a2f8e510a31d.html\" target=\"_blank\" rel=\"noopener\">github个人主页搭建</a><br>然后把主页的地址复制</p>\n</blockquote>\n<h2 id=\"2-安装git部署插件\"><a href=\"#2-安装git部署插件\" class=\"headerlink\" title=\"2.安装git部署插件\"></a>2.安装git部署插件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save deployer-git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-设置config\"><a href=\"#3-设置config\" class=\"headerlink\" title=\"3. 设置config\"></a>3. 设置config</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim _config.yml</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在最底设置,==注意==下面的几行代码中冒号后面有空格</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: git</span><br><span class=\"line\">repo: 自己刚刚设置的地址</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>按esc<br>wq保存退出</p>\n</blockquote>\n<h2 id=\"4-部署到github\"><a href=\"#4-部署到github\" class=\"headerlink\" title=\"4. 部署到github\"></a>4. 部署到github</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三-更换主题\"><a href=\"#三-更换主题\" class=\"headerlink\" title=\"三 更换主题\"></a>三 更换主题</h1><h2 id=\"1-下载主题\"><a href=\"#1-下载主题\" class=\"headerlink\" title=\"1. 下载主题\"></a>1. 下载主题</h2><blockquote>\n<p>去github上面找到喜欢的hexo的主题，然后复制主题地址</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone 找到的主题地址 themes/主题名字</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-改变主题\"><a href=\"#2-改变主题\" class=\"headerlink\" title=\"2.改变主题\"></a>2.改变主题</h2> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim _config.yml</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>把里面的themes换成自己刚刚下载的</p>\n</blockquote>\n<h2 id=\"3-查看效果更新\"><a href=\"#3-查看效果更新\" class=\"headerlink\" title=\"3.查看效果更新\"></a>3.查看效果更新</h2> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-输入自己的github个人主页地址查看\"><a href=\"#4-输入自己的github个人主页地址查看\" class=\"headerlink\" title=\"4.输入自己的github个人主页地址查看\"></a>4.输入自己的github个人主页地址查看</h2>","categories":["教程"],"tags":["hexo"]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"comment","url":"http://yoursite.com/comment/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"http://yoursite.com/css/personal-style.css","content":"\nnt-face {\n  font-family: \"Meiryo\";\n  src: url(\"/fonts/Meiryo.eot\");\n  /* IE9 */\n  src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n  url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n  url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n  /* iOS 4.1- */\n  font-style: normal;\n  font-weight: normal;\n}\nhtml.page-home {\n\n  background-image: url('/images/bg.png'); \n\n}\n","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"高得健的个人简历","url":"http://yoursite.com/offerme/index.html","content":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>手机：18033725294                                                                                      </li>\n<li>Email：<a href=\"mailto:necydcy@gmail.com\" target=\"_blank\" rel=\"noopener\">necydcy@gmail.com</a> </li>\n<li>QQ/微信号：cang1525723664</li>\n</ul>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>高得健/男/1998</li>\n<li>本科/石家庄铁道大学软件工程系</li>\n<li>毕业年份：2020年</li>\n<li>微博：<a href=\"href=\" https: www.weibo.com u 5721901695\">@喜欢二福的沧月君</a> </li>\n<li>技术博客：<a href=\"http://necydcy.com\" target=\"_blank\" rel=\"noopener\">http://necydcy.com</a></li>\n<li>博客园：<a href=\"https://www.cnblogs.com/miria-486\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/miria-486</a></li>\n<li>Github：<a href=\"http://github.com/cy486\" target=\"_blank\" rel=\"noopener\">http://github.com/cy486</a> </li>\n<li>期望职位：java开发，服务器运维，数据分析。</li>\n<li>期望城市：北京，上海，青岛</li>\n</ul>\n<h1 id=\"在校经历\"><a href=\"#在校经历\" class=\"headerlink\" title=\"在校经历\"></a>在校经历</h1><ul>\n<li>大学生创新创业大赛国家级项目–基于照片的景点360°场景重现与游玩线路规划[国家级]</li>\n<li>核心期刊发表论文–基于照片的景点360°场景重现与游玩线路规划系统</li>\n<li>第八届中国软件杯–基于物联网的视频系统实现全国决赛三等奖</li>\n<li>创青春创新创业比赛三等奖</li>\n<li>参加大数据挑战赛，晋级初赛</li>\n<li>石家庄铁道大学校<a href=\"https://baike.baidu.com/item/%E6%98%93%E7%8F%AD/1949003\" target=\"_blank\" rel=\"noopener\">易班</a>工作站外联部部长</li>\n<li>cosplay社团干事</li>\n</ul>\n<h1 id=\"技术写作与个人作品\"><a href=\"#技术写作与个人作品\" class=\"headerlink\" title=\"技术写作与个人作品\"></a>技术写作与个人作品</h1><ul>\n<li><p>业余时间经营个人博客( <a href=\"https://www.necydcy.me\" target=\"_blank\" rel=\"noopener\">https://www.necydcy.me</a> )，学习技术的同时也做了一些记录和总结并乐于分享</p>\n</li>\n<li><p><strong>项目介绍</strong></p>\n<p><strong>2018.09-2018.12</strong>    <strong>河北科技厅    设计与实现</strong></p>\n<ul>\n<li><p>项目名称：<a href=\"https://github.com/cy486/hotword\" target=\"_blank\" rel=\"noopener\">信息领域热词分析系统</a></p>\n</li>\n<li><p>软件环境：golang+beego+爬虫+文档生成</p>\n</li>\n<li><p>项目描述： 数据采集：要求从定期自动从网络中爬取信息领域的相关热词；，</p>\n</li>\n<li><p>项目职责：项目的设计与实现，在互联网上搜索信息领域热词，爬取词语相关文章，并对词语进行自动分类。存储到数据库。前端界面展示。</p>\n<ol>\n<li><p>项目的整理架构和项目前段模型的初步构建</p>\n</li>\n<li><p>负责爬取热词信息大约10万多条</p>\n</li>\n<li><p>负责词条的自动分类和词条相关文章的爬取，并与百度文库的文字对比，计算相似度。</p>\n</li>\n<li><p>相关的综合搜索查询。</p>\n</li>\n</ol>\n</li>\n</ul>\n<p><strong>2019.03-2019.08</strong>    <strong>第八届中国软件杯    设计与实现</strong></p>\n<ul>\n<li>项目名称：<a href=\"https://github.com/cy486/Wave\" target=\"_blank\" rel=\"noopener\">视频监控系统</a> </li>\n</ul>\n</li>\n<li><p>软件环境：jdk+树莓派+vue+udp+ffmpeg+图像识别算法+linux</p>\n<ul>\n<li>项目描述：项目目标是实现物联网环境下的视频监控解决方案，面向监控对象变化缓慢，减低监控视频的帧数不会影响监控效果的应用场景；同时满足当异常物体闯入造成监控画面短时剧烈变化是提高视频帧数以达监控目的的应用场景。 </li>\n</ul>\n</li>\n<li><p>项目职责：在项目以及完成的基础之上，主要负责项目的基础架构和udp协议和图像识别算法的编写</p>\n<ol>\n<li>负责树莓派端的linux环境搭建<ol start=\"2\">\n<li>负责树莓派端的视频流的获取和处理</li>\n</ol>\n</li>\n<li>使用图像识别算法进行画面变化异常的捕获和存储<ol start=\"4\">\n<li>自定义udp协议的传输过程，对异常视频的传输</li>\n</ol>\n</li>\n<li>服务器端视频的接收，处理与储存</li>\n<li>视频前端界面的展示</li>\n</ol>\n<p><strong>2019.09-至今   毕业设计   设计与实现</strong></p>\n<ul>\n<li><p>项目名称：p2p互联网金融系统 </p>\n</li>\n<li><p>软件环境：jdk+tomcat+spring+ibatis+struts1+mysql</p>\n</li>\n<li><p>项目描述：本系统采用SSH架构，Mysql数据库，，主要进行投资和购买，信息审核，支付加密。</p>\n</li>\n<li><p>项目职责：进行项目的总体架构，主要的代码的编写和后期的维护优化。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><p>以下均为我熟练使用的技能</p>\n<ul>\n<li>编程语言：Java</li>\n<li>Web框架：SSH</li>\n<li>数据库相关：MySQL</li>\n<li>版本管理、文档和自动化部署工具：Git</li>\n</ul>\n<hr>\n<h1 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h1><p>在校期间任易班工作站外联部部长，有较强的交流和沟通能力。</p>\n<p>积极参加科研项目，参加并完成国家级大学生创新创业项目，发表一篇论文，拥有多个软件著作权。</p>\n<p>闲暇时间撰写博客<a href=\"https://necydcy.me/\" target=\"_blank\" rel=\"noopener\">https://necydcy.me/</a></p>\n<p>喜欢逛一些技术博客和个人博客，v2ex，github，牛客网等。</p>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。<br>      <img src alt></p>\n","categories":[],"tags":[]}]